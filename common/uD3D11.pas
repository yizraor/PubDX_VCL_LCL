UNIT uD3D11;

INTERFACE

uses
  Windows, uDxTypes, uDXGI;

{$ALIGN ON}
{$MINENUMSIZE 4}

const
  D3D11_SDK_VERSION = 7;

  D3D11_CREATE_DEVICE_SINGLETHREADED                            = $01;
  D3D11_CREATE_DEVICE_DEBUG                                     = $02;
  D3D11_CREATE_DEVICE_SWITCH_TO_REF                             = $04;
  D3D11_CREATE_DEVICE_PREVENT_INTERNAL_THREADING_OPTIMIZATIONS  = $08;
  D3D11_CREATE_DEVICE_BGRA_SUPPORT                              = $20;

  D3D11_16BIT_INDEX_STRIP_CUT_VALUE = ( $ffff );
  D3D11_32BIT_INDEX_STRIP_CUT_VALUE = ( $ffffffff );
  D3D11_8BIT_INDEX_STRIP_CUT_VALUE = ( $ff );

  D3D11_ARRAY_AXIS_ADDRESS_RANGE_BIT_COUNT = ( 9 );
  D3D11_CLIP_OR_CULL_DISTANCE_COUNT = ( 8 );
  D3D11_CLIP_OR_CULL_DISTANCE_ELEMENT_COUNT = ( 2 );

  D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT = ( 14 );
  D3D11_COMMONSHADER_CONSTANT_BUFFER_COMPONENTS = ( 4 );
  D3D11_COMMONSHADER_CONSTANT_BUFFER_COMPONENT_BIT_COUNT = ( 32 );
  D3D11_COMMONSHADER_CONSTANT_BUFFER_HW_SLOT_COUNT = ( 15 );
  D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COMPONENTS = ( 4 );
  D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COUNT = ( 15 );
  D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READS_PER_INST = ( 1 );
  D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READ_PORTS = ( 1 );
  D3D11_COMMONSHADER_FLOWCONTROL_NESTING_LIMIT = ( 64 );
  D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COMPONENTS = ( 4 );
  D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COUNT = ( 1 );
  D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READS_PER_INST = ( 1 );
  D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READ_PORTS = ( 1 );
  D3D11_COMMONSHADER_IMMEDIATE_VALUE_COMPONENT_BIT_COUNT = ( 32 );
  D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_COMPONENTS = ( 1 );
  D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_COUNT = ( 128 );
  D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_READS_PER_INST = ( 1 );
  D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_READ_PORTS = ( 1 );
  D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT = ( 128 );
  D3D11_COMMONSHADER_SAMPLER_REGISTER_COMPONENTS = ( 1 );
  D3D11_COMMONSHADER_SAMPLER_REGISTER_COUNT = ( 16 );
  D3D11_COMMONSHADER_SAMPLER_REGISTER_READS_PER_INST = ( 1 );
  D3D11_COMMONSHADER_SAMPLER_REGISTER_READ_PORTS = ( 1 );
  D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT = ( 16 );
  D3D11_COMMONSHADER_SUBROUTINE_NESTING_LIMIT = ( 32 );
  D3D11_COMMONSHADER_TEMP_REGISTER_COMPONENTS = ( 4 );
  D3D11_COMMONSHADER_TEMP_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
  D3D11_COMMONSHADER_TEMP_REGISTER_COUNT = ( 4096 );
  D3D11_COMMONSHADER_TEMP_REGISTER_READS_PER_INST = ( 3 );
  D3D11_COMMONSHADER_TEMP_REGISTER_READ_PORTS = ( 3 );
  D3D11_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MAX = ( 10 );
  D3D11_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MIN = ( -10 );
  D3D11_COMMONSHADER_TEXEL_OFFSET_MAX_NEGATIVE = ( -8 );
  D3D11_COMMONSHADER_TEXEL_OFFSET_MAX_POSITIVE = ( 7 );

  D3D11_CS_4_X_BUCKET00_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 256 );
  D3D11_CS_4_X_BUCKET00_MAX_NUM_THREADS_PER_GROUP = ( 64 );
  D3D11_CS_4_X_BUCKET01_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 240 );
  D3D11_CS_4_X_BUCKET01_MAX_NUM_THREADS_PER_GROUP = ( 68 );
  D3D11_CS_4_X_BUCKET02_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 224 );
  D3D11_CS_4_X_BUCKET02_MAX_NUM_THREADS_PER_GROUP = ( 72 );
  D3D11_CS_4_X_BUCKET03_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 208 );
  D3D11_CS_4_X_BUCKET03_MAX_NUM_THREADS_PER_GROUP = ( 76 );
  D3D11_CS_4_X_BUCKET04_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 192 );
  D3D11_CS_4_X_BUCKET04_MAX_NUM_THREADS_PER_GROUP = ( 84 );
  D3D11_CS_4_X_BUCKET05_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 176 );
  D3D11_CS_4_X_BUCKET05_MAX_NUM_THREADS_PER_GROUP = ( 92 );
  D3D11_CS_4_X_BUCKET06_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 160 );
  D3D11_CS_4_X_BUCKET06_MAX_NUM_THREADS_PER_GROUP = ( 100 );
  D3D11_CS_4_X_BUCKET07_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 144 );
  D3D11_CS_4_X_BUCKET07_MAX_NUM_THREADS_PER_GROUP = ( 112 );
  D3D11_CS_4_X_BUCKET08_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 128 );
  D3D11_CS_4_X_BUCKET08_MAX_NUM_THREADS_PER_GROUP = ( 128 );
  D3D11_CS_4_X_BUCKET09_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 112 );
  D3D11_CS_4_X_BUCKET09_MAX_NUM_THREADS_PER_GROUP = ( 144 );
  D3D11_CS_4_X_BUCKET10_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 96 );
  D3D11_CS_4_X_BUCKET10_MAX_NUM_THREADS_PER_GROUP = ( 168 );
  D3D11_CS_4_X_BUCKET11_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 80 );
  D3D11_CS_4_X_BUCKET11_MAX_NUM_THREADS_PER_GROUP = ( 204 );
  D3D11_CS_4_X_BUCKET12_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 64 );
  D3D11_CS_4_X_BUCKET12_MAX_NUM_THREADS_PER_GROUP = ( 256 );
  D3D11_CS_4_X_BUCKET13_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 48 );
  D3D11_CS_4_X_BUCKET13_MAX_NUM_THREADS_PER_GROUP = ( 340 );
  D3D11_CS_4_X_BUCKET14_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 32 );
  D3D11_CS_4_X_BUCKET14_MAX_NUM_THREADS_PER_GROUP = ( 512 );
  D3D11_CS_4_X_BUCKET15_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 16 );
  D3D11_CS_4_X_BUCKET15_MAX_NUM_THREADS_PER_GROUP = ( 768 );
  D3D11_CS_4_X_DISPATCH_MAX_THREAD_GROUPS_IN_Z_DIMENSION = ( 1 );
  D3D11_CS_4_X_RAW_UAV_BYTE_ALIGNMENT = ( 256 );
  D3D11_CS_4_X_THREAD_GROUP_MAX_THREADS_PER_GROUP = ( 768 );
  D3D11_CS_4_X_THREAD_GROUP_MAX_X = ( 768 );
  D3D11_CS_4_X_THREAD_GROUP_MAX_Y = ( 768 );
  D3D11_CS_4_X_UAV_REGISTER_COUNT = ( 1 );
  D3D11_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION = ( 65535 );
  D3D11_CS_TGSM_REGISTER_COUNT = ( 8192 );
  D3D11_CS_TGSM_REGISTER_READS_PER_INST = ( 1 );
  D3D11_CS_TGSM_RESOURCE_REGISTER_COMPONENTS = ( 1 );
  D3D11_CS_TGSM_RESOURCE_REGISTER_READ_PORTS = ( 1 );
  D3D11_CS_THREAD_GROUP_MAX_THREADS_PER_GROUP = ( 1024 );
  D3D11_CS_THREAD_GROUP_MAX_X = ( 1024 );
  D3D11_CS_THREAD_GROUP_MAX_Y = ( 1024 );
  D3D11_CS_THREAD_GROUP_MAX_Z = ( 64 );
  D3D11_CS_THREAD_GROUP_MIN_X = ( 1 );
  D3D11_CS_THREAD_GROUP_MIN_Y = ( 1 );
  D3D11_CS_THREAD_GROUP_MIN_Z = ( 1 );
  D3D11_CS_THREAD_LOCAL_TEMP_REGISTER_POOL = ( 16384 );

  D3D11_DEFAULT_BLEND_FACTOR_ALPHA = ( 1.0 );
  D3D11_DEFAULT_BLEND_FACTOR_BLUE = ( 1.0 );
  D3D11_DEFAULT_BLEND_FACTOR_GREEN = ( 1.0 );
  D3D11_DEFAULT_BLEND_FACTOR_RED = ( 1.0 );
  D3D11_DEFAULT_BORDER_COLOR_COMPONENT = ( 0.0 );
  D3D11_DEFAULT_DEPTH_BIAS = ( 0 );
  D3D11_DEFAULT_DEPTH_BIAS_CLAMP = ( 0.0 );
  D3D11_DEFAULT_MAX_ANISOTROPY = ( 16.0 );
  D3D11_DEFAULT_MIP_LOD_BIAS = ( 0.0 );
  D3D11_DEFAULT_RENDER_TARGET_ARRAY_INDEX = ( 0 );
  D3D11_DEFAULT_SAMPLE_MASK = ( $ffffffff );
  D3D11_DEFAULT_SCISSOR_ENDX = ( 0 );
  D3D11_DEFAULT_SCISSOR_ENDY = ( 0 );
  D3D11_DEFAULT_SCISSOR_STARTX = ( 0 );
  D3D11_DEFAULT_SCISSOR_STARTY = ( 0 );
  D3D11_DEFAULT_SLOPE_SCALED_DEPTH_BIAS = ( 0.0 );
  D3D11_DEFAULT_STENCIL_READ_MASK = ( $ff );
  D3D11_DEFAULT_STENCIL_REFERENCE = ( 0 );
  D3D11_DEFAULT_STENCIL_WRITE_MASK = ( $ff );
  D3D11_DEFAULT_VIEWPORT_AND_SCISSORRECT_INDEX = ( 0 );
  D3D11_DEFAULT_VIEWPORT_HEIGHT = ( 0 );
  D3D11_DEFAULT_VIEWPORT_MAX_DEPTH = ( 0.0 );
  D3D11_DEFAULT_VIEWPORT_MIN_DEPTH = ( 0.0 );
  D3D11_DEFAULT_VIEWPORT_TOPLEFTX = ( 0 );
  D3D11_DEFAULT_VIEWPORT_TOPLEFTY = ( 0 );
  D3D11_DEFAULT_VIEWPORT_WIDTH = ( 0 );

  D3D11_DS_INPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS = ( 3968 );
  D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENTS = ( 4 );
  D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
  D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COUNT = ( 32 );
  D3D11_DS_INPUT_CONTROL_POINT_REGISTER_READS_PER_INST = ( 2 );
  D3D11_DS_INPUT_CONTROL_POINT_REGISTER_READ_PORTS = ( 1 );
  D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENTS = ( 3 );
  D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
  D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COUNT = ( 1 );
  D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_READS_PER_INST = ( 2 );
  D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_READ_PORTS = ( 1 );
  D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENTS = ( 4 );
  D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
  D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COUNT = ( 32 );
  D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST = ( 2 );
  D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_READ_PORTS = ( 1 );

  D3D11_DS_OUTPUT_REGISTER_COMPONENTS = ( 4 );
  D3D11_DS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
  D3D11_DS_OUTPUT_REGISTER_COUNT = ( 32 );

  D3D11_FLOAT16_FUSED_TOLERANCE_IN_ULP = ( 0.6 );
  D3D11_FLOAT32_MAX = ( 3.402823466e+38 );
  D3D11_FLOAT32_TO_INTEGER_TOLERANCE_IN_ULP = ( 0.6 );
  D3D11_FLOAT_TO_SRGB_EXPONENT_DENOMINATOR = ( 2.4 );
  D3D11_FLOAT_TO_SRGB_EXPONENT_NUMERATOR = ( 1.0 );
  D3D11_FLOAT_TO_SRGB_OFFSET = ( 0.055 );
  D3D11_FLOAT_TO_SRGB_SCALE_1 = ( 12.92 );
  D3D11_FLOAT_TO_SRGB_SCALE_2 = ( 1.055 );
  D3D11_FLOAT_TO_SRGB_THRESHOLD = ( 0.0031308 );
  D3D11_FTOI_INSTRUCTION_MAX_INPUT = ( 2147483647.999 );
  D3D11_FTOI_INSTRUCTION_MIN_INPUT = ( -2147483648.999 );
  D3D11_FTOU_INSTRUCTION_MAX_INPUT = ( 4294967295.999 );
  D3D11_FTOU_INSTRUCTION_MIN_INPUT = ( 0.0 );

  D3D11_GS_INPUT_INSTANCE_ID_READS_PER_INST = ( 2 );
  D3D11_GS_INPUT_INSTANCE_ID_READ_PORTS = ( 1 );
  D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENTS = ( 1 );
  D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
  D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COUNT = ( 1 );
  D3D11_GS_INPUT_PRIM_CONST_REGISTER_COMPONENTS = ( 1 );
  D3D11_GS_INPUT_PRIM_CONST_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
  D3D11_GS_INPUT_PRIM_CONST_REGISTER_COUNT = ( 1 );
  D3D11_GS_INPUT_PRIM_CONST_REGISTER_READS_PER_INST = ( 2 );
  D3D11_GS_INPUT_PRIM_CONST_REGISTER_READ_PORTS = ( 1 );
  D3D11_GS_INPUT_REGISTER_COMPONENTS = ( 4 );
  D3D11_GS_INPUT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
  D3D11_GS_INPUT_REGISTER_COUNT = ( 32 );
  D3D11_GS_INPUT_REGISTER_READS_PER_INST = ( 2 );
  D3D11_GS_INPUT_REGISTER_READ_PORTS = ( 1 );
  D3D11_GS_INPUT_REGISTER_VERTICES = ( 32 );
  D3D11_GS_MAX_INSTANCE_COUNT = ( 32 );
  D3D11_GS_MAX_OUTPUT_VERTEX_COUNT_ACROSS_INSTANCES = ( 1024 );
  D3D11_GS_OUTPUT_ELEMENTS = ( 32 );
  D3D11_GS_OUTPUT_REGISTER_COMPONENTS = ( 4 );
  D3D11_GS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
  D3D11_GS_OUTPUT_REGISTER_COUNT = ( 32 );

  D3D11_HS_CONTROL_POINT_PHASE_INPUT_REGISTER_COUNT = ( 32 );
  D3D11_HS_CONTROL_POINT_PHASE_OUTPUT_REGISTER_COUNT = ( 32 );
  D3D11_HS_CONTROL_POINT_REGISTER_COMPONENTS = ( 4 );
  D3D11_HS_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
  D3D11_HS_CONTROL_POINT_REGISTER_READS_PER_INST = ( 2 );
  D3D11_HS_CONTROL_POINT_REGISTER_READ_PORTS = ( 1 );
  D3D11_HS_FORK_PHASE_INSTANCE_COUNT_UPPER_BOUND = ( $ffffffff );
  D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENTS = ( 1 );
  D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
  D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COUNT = ( 1 );
  D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READS_PER_INST = ( 2 );
  D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READ_PORTS = ( 1 );
  D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENTS = ( 1 );
  D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
  D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COUNT = ( 1 );
  D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READS_PER_INST = ( 2 );
  D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READ_PORTS = ( 1 );
  D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS = ( 1 );
  D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
  D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COUNT = ( 1 );
  D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST = ( 2 );
  D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS = ( 1 );
  D3D11_HS_JOIN_PHASE_INSTANCE_COUNT_UPPER_BOUND = ( $ffffffff );
  D3D11_HS_MAXTESSFACTOR_LOWER_BOUND = ( 1.0 );
  D3D11_HS_MAXTESSFACTOR_UPPER_BOUND = ( 64.0 );
  D3D11_HS_OUTPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS = ( 3968 );
  D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENTS = ( 1 );
  D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
  D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COUNT = ( 1 );
  D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READS_PER_INST = ( 2 );
  D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READ_PORTS = ( 1 );
  D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENTS = ( 4 );
  D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
  D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COUNT = ( 32 );
  D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST = ( 2 );
  D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READ_PORTS = ( 1 );

  D3D11_IA_DEFAULT_INDEX_BUFFER_OFFSET_IN_BYTES = ( 0 );
  D3D11_IA_DEFAULT_PRIMITIVE_TOPOLOGY = ( 0 );
  D3D11_IA_DEFAULT_VERTEX_BUFFER_OFFSET_IN_BYTES = ( 0 );
  D3D11_IA_INDEX_INPUT_RESOURCE_SLOT_COUNT = ( 1 );
  D3D11_IA_INSTANCE_ID_BIT_COUNT = ( 32 );
  D3D11_IA_INTEGER_ARITHMETIC_BIT_COUNT = ( 32 );
  D3D11_IA_PATCH_MAX_CONTROL_POINT_COUNT = ( 32 );
  D3D11_IA_PRIMITIVE_ID_BIT_COUNT = ( 32 );
  D3D11_IA_VERTEX_ID_BIT_COUNT = ( 32 );
  D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT = ( 32 );
  D3D11_IA_VERTEX_INPUT_STRUCTURE_ELEMENTS_COMPONENTS = ( 128 );
  D3D11_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT = ( 32 );

  D3D11_INTEGER_DIVIDE_BY_ZERO_QUOTIENT = ( $ffffffff );
  D3D11_INTEGER_DIVIDE_BY_ZERO_REMAINDER = ( $ffffffff );

  D3D11_KEEP_RENDER_TARGETS_AND_DEPTH_STENCIL = ( $ffffffff );
  D3D11_KEEP_UNORDERED_ACCESS_VIEWS = ( $ffffffff );

  D3D11_LINEAR_GAMMA = ( 1.0 );
  D3D11_MAJOR_VERSION = ( 11 );

  D3D11_MAX_BORDER_COLOR_COMPONENT = ( 1.0 );
  D3D11_MAX_DEPTH = ( 1.0 );
  D3D11_MAX_MAXANISOTROPY = ( 16 );
  D3D11_MAX_MULTISAMPLE_SAMPLE_COUNT = ( 32 );
  D3D11_MAX_POSITION_VALUE = ( 3.402823466e+34 );
  D3D11_MAX_TEXTURE_DIMENSION_2_TO_EXP = ( 17 );
  D3D11_MINOR_VERSION = ( 0 );
  D3D11_MIN_BORDER_COLOR_COMPONENT = ( 0.0 );
  D3D11_MIN_DEPTH = ( 0.0 );
  D3D11_MIN_MAXANISOTROPY = ( 0 );
  D3D11_MIP_LOD_BIAS_MAX = ( 15.99 );
  D3D11_MIP_LOD_BIAS_MIN = ( -16.0 );
  D3D11_MIP_LOD_FRACTIONAL_BIT_COUNT = ( 8 );
  D3D11_MIP_LOD_RANGE_BIT_COUNT = ( 8 );

  D3D11_MULTISAMPLE_ANTIALIAS_LINE_WIDTH = ( 1.4 );
  D3D11_NONSAMPLE_FETCH_OUT_OF_RANGE_ACCESS_RESULT = ( 0 );
  D3D11_PIXEL_ADDRESS_RANGE_BIT_COUNT = ( 15 );
  D3D11_PRE_SCISSOR_PIXEL_ADDRESS_RANGE_BIT_COUNT = ( 16 );

  D3D11_PS_CS_UAV_REGISTER_COMPONENTS = ( 1 );
  D3D11_PS_CS_UAV_REGISTER_COUNT = ( 8 );
  D3D11_PS_CS_UAV_REGISTER_READS_PER_INST = ( 1 );
  D3D11_PS_CS_UAV_REGISTER_READ_PORTS = ( 1 );
  D3D11_PS_FRONTFACING_DEFAULT_VALUE = ( $ffffffff );
  D3D11_PS_FRONTFACING_FALSE_VALUE = ( 0 );
  D3D11_PS_FRONTFACING_TRUE_VALUE = ( $ffffffff );
  D3D11_PS_INPUT_REGISTER_COMPONENTS = ( 4 );
  D3D11_PS_INPUT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
  D3D11_PS_INPUT_REGISTER_COUNT = ( 32 );
  D3D11_PS_INPUT_REGISTER_READS_PER_INST = ( 2 );
  D3D11_PS_INPUT_REGISTER_READ_PORTS = ( 1 );
  D3D11_PS_LEGACY_PIXEL_CENTER_FRACTIONAL_COMPONENT = ( 0.0 );
  D3D11_PS_OUTPUT_DEPTH_REGISTER_COMPONENTS = ( 1 );
  D3D11_PS_OUTPUT_DEPTH_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
  D3D11_PS_OUTPUT_DEPTH_REGISTER_COUNT = ( 1 );
  D3D11_PS_OUTPUT_MASK_REGISTER_COMPONENTS = ( 1 );
  D3D11_PS_OUTPUT_MASK_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
  D3D11_PS_OUTPUT_MASK_REGISTER_COUNT = ( 1 );
  D3D11_PS_OUTPUT_REGISTER_COMPONENTS = ( 4 );
  D3D11_PS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
  D3D11_PS_OUTPUT_REGISTER_COUNT = ( 8 );
  D3D11_PS_PIXEL_CENTER_FRACTIONAL_COMPONENT = ( 0.5 );

  D3D11_RAW_UAV_SRV_BYTE_ALIGNMENT = ( 16 );

  D3D11_REQ_BLEND_OBJECT_COUNT_PER_DEVICE = ( 4096 );
  D3D11_REQ_BUFFER_RESOURCE_TEXEL_COUNT_2_TO_EXP = ( 27 );
  D3D11_REQ_CONSTANT_BUFFER_ELEMENT_COUNT = ( 4096 );
  D3D11_REQ_DEPTH_STENCIL_OBJECT_COUNT_PER_DEVICE = ( 4096 );
  D3D11_REQ_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = ( 32 );
  D3D11_REQ_DRAW_VERTEX_COUNT_2_TO_EXP = ( 32 );
  D3D11_REQ_FILTERING_HW_ADDRESSABLE_RESOURCE_DIMENSION = ( 16384 );
  D3D11_REQ_GS_INVOCATION_32BIT_OUTPUT_COMPONENT_LIMIT = ( 1024 );
  D3D11_REQ_IMMEDIATE_CONSTANT_BUFFER_ELEMENT_COUNT = ( 4096 );
  D3D11_REQ_MAXANISOTROPY = ( 16 );
  D3D11_REQ_MIP_LEVELS = ( 15 );
  D3D11_REQ_MULTI_ELEMENT_STRUCTURE_SIZE_IN_BYTES = ( 2048 );
  D3D11_REQ_RASTERIZER_OBJECT_COUNT_PER_DEVICE = ( 4096 );
  D3D11_REQ_RENDER_TO_BUFFER_WINDOW_WIDTH = ( 16384 );
  D3D11_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_A_TERM = ( 128 );
  D3D11_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_B_TERM = ( 0.25 );
  D3D11_REQ_RESOURCE_VIEW_COUNT_PER_DEVICE_2_TO_EXP = ( 20 );
  D3D11_REQ_SAMPLER_OBJECT_COUNT_PER_DEVICE = ( 4096 );
  D3D11_REQ_TEXTURE1D_ARRAY_AXIS_DIMENSION = ( 2048 );
  D3D11_REQ_TEXTURE1D_U_DIMENSION = ( 16384 );
  D3D11_REQ_TEXTURE2D_ARRAY_AXIS_DIMENSION = ( 2048 );
  D3D11_REQ_TEXTURE2D_U_OR_V_DIMENSION = ( 16384 );
  D3D11_REQ_TEXTURE3D_U_V_OR_W_DIMENSION = ( 2048 );
  D3D11_REQ_TEXTURECUBE_DIMENSION = ( 16384 );

  D3D11_RESINFO_INSTRUCTION_MISSING_COMPONENT_RETVAL = ( 0 );

  D3D11_SHADER_MAJOR_VERSION = ( 5 );
  D3D11_SHADER_MAX_INSTANCES = ( 65535 );
  D3D11_SHADER_MAX_INTERFACES = ( 256 );
  D3D11_SHADER_MAX_INTERFACE_CALL_SITES = ( 4096 );
  D3D11_SHADER_MAX_TYPES = ( 65535 );
  D3D11_SHADER_MINOR_VERSION = ( 0 );

  D3D11_SHIFT_INSTRUCTION_PAD_VALUE = ( 0 );
  D3D11_SHIFT_INSTRUCTION_SHIFT_VALUE_BIT_COUNT = ( 5 );

  D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT = ( 8 );

  D3D11_SO_BUFFER_MAX_STRIDE_IN_BYTES = ( 2048 );
  D3D11_SO_BUFFER_MAX_WRITE_WINDOW_IN_BYTES = ( 512 );
  D3D11_SO_BUFFER_SLOT_COUNT = ( 4 );
  D3D11_SO_DDI_REGISTER_INDEX_DENOTING_GAP = ( $ffffffff );
  D3D11_SO_NO_RASTERIZED_STREAM = ( $ffffffff );
  D3D11_SO_OUTPUT_COMPONENT_COUNT = ( 128 );
  D3D11_SO_STREAM_COUNT = ( 4 );

  D3D11_SPEC_DATE_DAY = ( 19 );
  D3D11_SPEC_DATE_MONTH = ( 02 );
  D3D11_SPEC_DATE_YEAR = ( 2009 );
  D3D11_SPEC_VERSION = ( 0.01 );

  D3D11_SRGB_GAMMA = ( 2.2 );
  D3D11_SRGB_TO_FLOAT_DENOMINATOR_1 = ( 12.92 );
  D3D11_SRGB_TO_FLOAT_DENOMINATOR_2 = ( 1.055 );
  D3D11_SRGB_TO_FLOAT_EXPONENT = ( 2.4 );
  D3D11_SRGB_TO_FLOAT_OFFSET = ( 0.055 );
  D3D11_SRGB_TO_FLOAT_THRESHOLD = ( 0.04045 );
  D3D11_SRGB_TO_FLOAT_TOLERANCE_IN_ULP = ( 0.5 );

  D3D11_STANDARD_COMPONENT_BIT_COUNT = ( 32 );
  D3D11_STANDARD_COMPONENT_BIT_COUNT_DOUBLED = ( 64 );
  D3D11_STANDARD_MAXIMUM_ELEMENT_ALIGNMENT_BYTE_MULTIPLE = ( 4 );
  D3D11_STANDARD_PIXEL_COMPONENT_COUNT = ( 128 );
  D3D11_STANDARD_PIXEL_ELEMENT_COUNT = ( 32 );
  D3D11_STANDARD_VECTOR_SIZE = ( 4 );
  D3D11_STANDARD_VERTEX_ELEMENT_COUNT = ( 32 );
  D3D11_STANDARD_VERTEX_TOTAL_COMPONENT_COUNT = ( 64 );

  D3D11_SUBPIXEL_FRACTIONAL_BIT_COUNT = ( 8 );
  D3D11_SUBTEXEL_FRACTIONAL_BIT_COUNT = ( 8 );

  D3D11_TESSELLATOR_MAX_EVEN_TESSELLATION_FACTOR = ( 64 );
  D3D11_TESSELLATOR_MAX_ISOLINE_DENSITY_TESSELLATION_FACTOR = ( 64 );
  D3D11_TESSELLATOR_MAX_ODD_TESSELLATION_FACTOR = ( 63 );
  D3D11_TESSELLATOR_MAX_TESSELLATION_FACTOR = ( 64 );
  D3D11_TESSELLATOR_MIN_EVEN_TESSELLATION_FACTOR = ( 2 );
  D3D11_TESSELLATOR_MIN_ISOLINE_DENSITY_TESSELLATION_FACTOR = ( 1 );
  D3D11_TESSELLATOR_MIN_ODD_TESSELLATION_FACTOR = ( 1 );

  D3D11_TEXEL_ADDRESS_RANGE_BIT_COUNT = ( 16 );

  D3D11_UNBOUND_MEMORY_ACCESS_RESULT = ( 0 );

  D3D11_VIEWPORT_AND_SCISSORRECT_MAX_INDEX = ( 15 );
  D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE = ( 16 );
  D3D11_VIEWPORT_BOUNDS_MAX = ( 32767 );
  D3D11_VIEWPORT_BOUNDS_MIN = ( -32768 );

  D3D11_VS_INPUT_REGISTER_COMPONENTS = ( 4 );
  D3D11_VS_INPUT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
  D3D11_VS_INPUT_REGISTER_COUNT = ( 32 );
  D3D11_VS_INPUT_REGISTER_READS_PER_INST = ( 2 );
  D3D11_VS_INPUT_REGISTER_READ_PORTS = ( 1 );
  D3D11_VS_OUTPUT_REGISTER_COMPONENTS = ( 4 );
  D3D11_VS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
  D3D11_VS_OUTPUT_REGISTER_COUNT = ( 32 );

  D3D11_WHQL_CONTEXT_COUNT_FOR_RESOURCE_LIMIT = ( 10 );
  D3D11_WHQL_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = ( 25 );
  D3D11_WHQL_DRAW_VERTEX_COUNT_2_TO_EXP = ( 25 );

  D3D11_APPEND_ALIGNED_ELEMENT  = $ffffffff;

 _FACD3D11 = $087C;
 _FACD3D11DEBUG = _FACD3D11 + 1;

  D3D11_1_UAV_SLOT_COUNT = 64;  // DirectX 11.1 constant

 // #define MAKE_HRESULT(sev,fac,code) \
 //   ((HRESULT) (((unsigned long)(sev)<<31) | ((unsigned long)(fac)<<16) | ((unsigned long)(code))) )
 // #define MAKE_D3D11_HRESULT( code )  MAKE_HRESULT( 1, _FACD3D11, code )
 // #define MAKE_D3D11_STATUS( code )   MAKE_HRESULT( 0, _FACD3D11, code )

  D3D11_ERROR_TOO_MANY_UNIQUE_STATE_OBJECTS  = (1 shl 31) or (_FACD3D11 shl 16) or (1);
  D3D11_ERROR_FILE_NOT_FOUND  = (1 shl 31) or (_FACD3D11 shl 16) or (2);
  D3D11_ERROR_TOO_MANY_UNIQUE_VIEW_OBJECTS  = (1 shl 31) or (_FACD3D11 shl 16) or (3);
  D3D11_ERROR_DEFERRED_CONTEXT_MAP_WITHOUT_INITIAL_DISCARD  = (1 shl 31) or (_FACD3D11 shl 16) or (4);

  D3D11_FILTER_TYPE_MASK = 3;
  D3D11_MIN_FILTER_SHIFT = 4;
  D3D11_MAG_FILTER_SHIFT = 2;
  D3D11_MIP_FILTER_SHIFT = 0;

  D3D11_COMPARISON_FILTERING_BIT  = $80;
  D3D11_ANISOTROPIC_FILTERING_BIT = $40;

  // D3D11_BIND_FLAGS
  D3D11_BIND_VERTEX_BUFFER     = $0001;
  D3D11_BIND_INDEX_BUFFER      = $0002;
  D3D11_BIND_CONSTANT_BUFFER   = $0004;
  D3D11_BIND_SHADER_RESOURCE   = $0008;
  D3D11_BIND_STREAM_OUTPUT     = $0010;
  D3D11_BIND_RENDER_TARGET     = $0020;
  D3D11_BIND_DEPTH_STENCIL     = $0040;
  D3D11_BIND_UNORDERED_ACCESS  = $0080;
  // DirectX 11.1
  // Set this flag to indicate that a 2D texture is used to receive output from the decoder API
  D3D11_BIND_DECODER           = $0200;
  // Set this flag to indicate that a 2D texture is used to receive input from the video encoder API
  D3D11_BIND_VIDEO_ENCODER     = $0400;

  // D3D11_CPU_ACCESS_FLAGS
  D3D11_CPU_ACCESS_WRITE  = $010000;
  D3D11_CPU_ACCESS_READ   = $020000;

  // D3D11_RESOURCE_MISC_FLAGS
  D3D11_RESOURCE_MISC_GENERATE_MIPS            = $000001;
  D3D11_RESOURCE_MISC_SHARED                   = $000002;
  D3D11_RESOURCE_MISC_TEXTURECUBE              = $000004;
  D3D11_RESOURCE_MISC_DRAWINDIRECT_ARGS        = $000010;
  D3D11_RESOURCE_MISC_BUFFER_ALLOW_RAW_VIEWS   = $000020;
  D3D11_RESOURCE_MISC_BUFFER_STRUCTURED        = $000040;
  D3D11_RESOURCE_MISC_RESOURCE_CLAMP           = $000080;
  D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX        = $000100;
  D3D11_RESOURCE_MISC_GDI_COMPATIBLE           = $000200;
  // DirectX 11.1
  D3D11_RESOURCE_MISC_SHARED_NTHANDLE          = $000800;
  D3D11_RESOURCE_MISC_RESTRICTED_CONTENT       = $001000;
  D3D11_RESOURCE_MISC_RESTRICT_SHARED_RESOURCE = $002000;
  D3D11_RESOURCE_MISC_RESTRICT_SHARED_RESOURCE_DRIVER = $004000;
  D3D11_RESOURCE_MISC_GUARDED    = $008000;
  D3D11_RESOURCE_MISC_TILE_POOL  = $020000;
  D3D11_RESOURCE_MISC_TILED      = $040000;

  // D3D11_MAP_FLAGS
  D3D11_MAP_FLAG_DO_NOT_WAIT = $00100000;

  // D3D11_RAISE_FLAGS
  D3D11_RAISE_FLAG_DRIVER_INTERNAL_ERROR = 1;

  // D3D11_BUFFEREX_SRV_FLAGS
  D3D11_BUFFEREX_SRV_FLAG_RAW = 1;

  // D3D11_DSV_FLAGS
  D3D11_DSV_READ_ONLY_DEPTH    = 1;
  D3D11_DSV_READ_ONLY_STENCIL  = 2;

  // D3D11_BUFFER_UAV_FLAGS
  D3D11_BUFFER_UAV_FLAG_RAW      = 1;
  D3D11_BUFFER_UAV_FLAG_APPEND   = 2;
  D3D11_BUFFER_UAV_FLAG_COUNTER  = 4;

  // D3D11_ASYNC_GETDATA_FLAGS
  D3D11_ASYNC_GETDATA_DONOTFLUSH = 1;

  // D3D11_QUERY_MISC_FLAGS
  D3D11_QUERY_MISC_PREDICATEHINT = 1;


type
  ID3D11DeviceChild = interface;
  ID3D11DepthStencilState = interface;
  ID3D11BlendState = interface;
  ID3D11RasterizerState = interface;
  ID3D11Resource = interface;
  ID3D11Buffer = interface;
  ID3D11Texture1D = interface;
  ID3D11Texture2D = interface;
  ID3D11Texture3D = interface;
  ID3D11View = interface;
  ID3D11ShaderResourceView = interface;
  ID3D11RenderTargetView = interface;
  ID3D11DepthStencilView = interface;
  ID3D11UnorderedAccessView = interface;
  ID3D11VertexShader = interface;
  ID3D11HullShader = interface;
  ID3D11DomainShader = interface;
  ID3D11GeometryShader = interface;
  ID3D11PixelShader = interface;
  ID3D11ComputeShader = interface;
  ID3D11InputLayout = interface;
  ID3D11SamplerState = interface;
  ID3D11Asynchronous = interface;
  ID3D11Query = interface;
  ID3D11Predicate = interface;
  ID3D11Counter = interface;
  ID3D11ClassInstance = interface;
  ID3D11ClassLinkage = interface;
  ID3D11CommandList = interface;
  ID3D11DeviceContext = interface;
  ID3D11Device = interface;


  LP_ID3D11DeviceChild = ^ID3D11DeviceChild;
  LP_ID3D11DepthStencilState = ^ID3D11DepthStencilState;
  LP_ID3D11BlendState = ^ID3D11BlendState;
  LP_ID3D11RasterizerState = ^ID3D11RasterizerState;
  LP_ID3D11Resource = ^ID3D11Resource;
  LP_ID3D11Buffer = ^ID3D11Buffer;
  LP_ID3D11Texture1D = ^ID3D11Texture1D;
  LP_ID3D11Texture2D = ^ID3D11Texture2D;
  LP_ID3D11Texture3D = ^ID3D11Texture3D;
  LP_ID3D11View = ^ID3D11View;
  LP_ID3D11ShaderResourceView = ^ID3D11ShaderResourceView;
  LP_ID3D11RenderTargetView = ^ID3D11RenderTargetView;
  LP_ID3D11DepthStencilView = ^ID3D11DepthStencilView;
  LP_ID3D11UnorderedAccessView = ^ID3D11UnorderedAccessView;
  LP_ID3D11VertexShader = ^ID3D11VertexShader;
  LP_ID3D11HullShader = ^ID3D11HullShader;
  LP_ID3D11DomainShader = ^ID3D11DomainShader;
  LP_ID3D11GeometryShader = ^ID3D11GeometryShader;
  LP_ID3D11PixelShader = ^ID3D11PixelShader;
  LP_ID3D11ComputeShader = ^ID3D11ComputeShader;
  LP_ID3D11InputLayout = ^ID3D11InputLayout;
  LP_ID3D11SamplerState = ^ID3D11SamplerState;
  LP_ID3D11Asynchronous = ^ID3D11Asynchronous;
  LP_ID3D11Query = ^ID3D11Query;
  LP_ID3D11Predicate = ^ID3D11Predicate;
  LP_ID3D11Counter = ^ID3D11Counter;
  LP_ID3D11ClassInstance = ^ID3D11ClassInstance;
  LP_ID3D11ClassLinkage = ^ID3D11ClassLinkage;
  LP_ID3D11CommandList = ^ID3D11CommandList;
  LP_ID3D11DeviceContext = ^ID3D11DeviceContext;
  LP_ID3D11Device = ^ID3D11Device;


  D3D11_CREATE_DEVICE_FLAGS = UINT;
  D3D11_BIND_FLAGS = UINT;
  D3D11_CPU_ACCESS_FLAGS = UINT;
  D3D11_RESOURCE_MISC_FLAGS = UINT;
  D3D11_MAP_FLAGS = UINT;
  D3D11_RAISE_FLAGS = UINT;
  D3D11_BUFFEREX_SRV_FLAGS = UINT;
  D3D11_DSV_FLAGS = UINT;
  D3D11_BUFFER_UAV_FLAGS = UINT;
  D3D11_ASYNC_GETDATA_FLAGS = UINT;
  D3D11_QUERY_MISC_FLAGS = UINT;


  D3D_RGBA_FLOAT = record
    case Byte of
      0:  ( R: FLOAT;
            G: FLOAT;
            B: FLOAT;
            A: FLOAT; );
      1:  ( Colors: array[0..3] of Single );
  end;

  D3D_RGBA_UINT = record
    case Byte of
      0:  ( R: UINT;
            G: UINT;
            B: UINT;
            A: UINT; );
      1:  ( Colors: array[0..3] of UINT );
  end;


  D3D11_DRIVER_TYPE =
  (
    D3D11_DRIVER_TYPE_UNKNOWN     = 0,
    D3D11_DRIVER_TYPE_HARDWARE    = 1,
    D3D11_DRIVER_TYPE_REFERENCE   = 2,
    D3D11_DRIVER_TYPE_NULL        = 3,
    D3D11_DRIVER_TYPE_SOFTWARE    = 4,
    D3D11_DRIVER_TYPE_WARP        = 5
  );

  LP_D3D_FEATURE_LEVEL = ^D3D11_FEATURE_LEVEL;
  D3D11_FEATURE_LEVEL =
  (
    D3D11_FEATURE_LEVEL_9_1   = $00009100,
    D3D11_FEATURE_LEVEL_9_2   = $00009200,
    D3D11_FEATURE_LEVEL_9_3   = $00009300,
    D3D11_FEATURE_LEVEL_10_0  = $0000A000,
    D3D11_FEATURE_LEVEL_10_1  = $0000A100,
    D3D11_FEATURE_LEVEL_11_0  = $0000B000,
    D3D11_FEATURE_LEVEL_11_1  = $0000B100
  );

  D3D11_INPUT_CLASSIFICATION =
  (
    D3D11_INPUT_PER_VERTEX_DATA    = 0,
    D3D11_INPUT_PER_INSTANCE_DATA  = 1
  );

  LP_D3D11_INPUT_ELEMENT_DESC = ^D3D11_INPUT_ELEMENT_DESC;
  D3D11_INPUT_ELEMENT_DESC = record
    SemanticName: LPCSTR;
    SemanticIndex: UINT;
    Format: DXGI_FORMAT;
    InputSlot: UINT;
    AlignedByteOffset: UINT;
    InputSlotClass: D3D11_INPUT_CLASSIFICATION;
    InstanceDataStepRate: UINT;
  end;

  D3D11_FILL_MODE =
  (
    D3D11_FILL_WIREFRAME = 2,
    D3D11_FILL_SOLID     = 3
  );

  D3D11_PRIMITIVE_TOPOLOGY =
  (
    D3D11_PRIMITIVE_TOPOLOGY_UNDEFINED = 0,
    D3D11_PRIMITIVE_TOPOLOGY_POINTLIST = 1,
    D3D11_PRIMITIVE_TOPOLOGY_LINELIST = 2,
    D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP = 3,
    D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST = 4,
    D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP = 5,
    D3D11_PRIMITIVE_TOPOLOGY_LINELIST_ADJ = 10,
    D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ = 11,
    D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ = 12,
    D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ = 13,
    D3D11_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST = 33,
    D3D11_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST = 34,
    D3D11_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST = 35,
    D3D11_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST = 36,
    D3D11_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST = 37,
    D3D11_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST = 38,
    D3D11_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST = 39,
    D3D11_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST = 40,
    D3D11_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST = 41,
    D3D11_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST = 42,
    D3D11_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST = 43,
    D3D11_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST = 44,
    D3D11_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST = 45,
    D3D11_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST = 46,
    D3D11_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST = 47,
    D3D11_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST = 48,
    D3D11_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST = 49,
    D3D11_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST = 50,
    D3D11_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST = 51,
    D3D11_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST = 52,
    D3D11_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST = 53,
    D3D11_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST = 54,
    D3D11_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST = 55,
    D3D11_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST = 56,
    D3D11_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST = 57,
    D3D11_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST = 58,
    D3D11_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST = 59,
    D3D11_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST = 60,
    D3D11_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST = 61,
    D3D11_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST = 62,
    D3D11_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST = 63,
    D3D11_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST = 64
  );

  D3D11_PRIMITIVE =
  (
    D3D11_PRIMITIVE_UNDEFINED = 0,
    D3D11_PRIMITIVE_POINT = 1,
    D3D11_PRIMITIVE_LINE = 2,
    D3D11_PRIMITIVE_TRIANGLE = 3,
    D3D11_PRIMITIVE_LINE_ADJ = 6,
    D3D11_PRIMITIVE_TRIANGLE_ADJ = 7,
    D3D11_PRIMITIVE_1_CONTROL_POINT_PATCH = 8,
    D3D11_PRIMITIVE_2_CONTROL_POINT_PATCH = 9,
    D3D11_PRIMITIVE_3_CONTROL_POINT_PATCH = 10,
    D3D11_PRIMITIVE_4_CONTROL_POINT_PATCH = 11,
    D3D11_PRIMITIVE_5_CONTROL_POINT_PATCH = 12,
    D3D11_PRIMITIVE_6_CONTROL_POINT_PATCH = 13,
    D3D11_PRIMITIVE_7_CONTROL_POINT_PATCH = 14,
    D3D11_PRIMITIVE_8_CONTROL_POINT_PATCH = 15,
    D3D11_PRIMITIVE_9_CONTROL_POINT_PATCH = 16,
    D3D11_PRIMITIVE_10_CONTROL_POINT_PATCH = 17,
    D3D11_PRIMITIVE_11_CONTROL_POINT_PATCH = 18,
    D3D11_PRIMITIVE_12_CONTROL_POINT_PATCH = 19,
    D3D11_PRIMITIVE_13_CONTROL_POINT_PATCH = 20,
    D3D11_PRIMITIVE_14_CONTROL_POINT_PATCH = 21,
    D3D11_PRIMITIVE_15_CONTROL_POINT_PATCH = 22,
    D3D11_PRIMITIVE_16_CONTROL_POINT_PATCH = 23,
    D3D11_PRIMITIVE_17_CONTROL_POINT_PATCH = 24,
    D3D11_PRIMITIVE_18_CONTROL_POINT_PATCH = 25,
    D3D11_PRIMITIVE_19_CONTROL_POINT_PATCH = 26,
    D3D11_PRIMITIVE_20_CONTROL_POINT_PATCH = 27,
    D3D11_PRIMITIVE_21_CONTROL_POINT_PATCH = 28,
    D3D11_PRIMITIVE_22_CONTROL_POINT_PATCH = 29,
    D3D11_PRIMITIVE_23_CONTROL_POINT_PATCH = 30,
    D3D11_PRIMITIVE_24_CONTROL_POINT_PATCH = 31,
    D3D11_PRIMITIVE_25_CONTROL_POINT_PATCH = 32,
    D3D11_PRIMITIVE_26_CONTROL_POINT_PATCH = 33,
    D3D11_PRIMITIVE_27_CONTROL_POINT_PATCH = 34,
    D3D11_PRIMITIVE_28_CONTROL_POINT_PATCH = 35,
    D3D11_PRIMITIVE_29_CONTROL_POINT_PATCH = 36,
    D3D11_PRIMITIVE_30_CONTROL_POINT_PATCH = 37,
    D3D11_PRIMITIVE_31_CONTROL_POINT_PATCH = 38,
    D3D11_PRIMITIVE_32_CONTROL_POINT_PATCH = 39
  );

  D3D11_CULL_MODE =
  (
    D3D11_CULL_NONE  = 1,
    D3D11_CULL_FRONT = 2,
    D3D11_CULL_BACK  = 3
  );

  LP_D3D11_SO_DECLARATION_ENTRY = ^D3D11_SO_DECLARATION_ENTRY;
  D3D11_SO_DECLARATION_ENTRY = record
    Stream: UINT;
    SemanticName: LPCSTR;
    SemanticIndex: UINT;
    StartComponent: BYTE;
    ComponentCount: BYTE;
    OutputSlot: BYTE;
  end;

  LP_D3D11_VIEWPORT = ^D3D11_VIEWPORT;
  D3D11_VIEWPORT = record
    TopLeftX: FLOAT;
    TopLeftY: FLOAT;
    Width: FLOAT;
    Height: FLOAT;
    MinDepth: FLOAT;
    MaxDepth: FLOAT;
  end;

  D3D11_RESOURCE_DIMENSION =
  (
    D3D11_RESOURCE_DIMENSION_UNKNOWN   = 0,
    D3D11_RESOURCE_DIMENSION_BUFFER     = 1,
    D3D11_RESOURCE_DIMENSION_TEXTURE1D = 2,
    D3D11_RESOURCE_DIMENSION_TEXTURE2D = 3,
    D3D11_RESOURCE_DIMENSION_TEXTURE3D = 4
  );

  D3D11_SRV_DIMENSION =
  (
    D3D11_SRV_DIMENSION_UNKNOWN = 0,
    D3D11_SRV_DIMENSION_BUFFER = 1,
    D3D11_SRV_DIMENSION_TEXTURE1D = 2,
    D3D11_SRV_DIMENSION_TEXTURE1DARRAY = 3,
    D3D11_SRV_DIMENSION_TEXTURE2D = 4,
    D3D11_SRV_DIMENSION_TEXTURE2DARRAY = 5,
    D3D11_SRV_DIMENSION_TEXTURE2DMS = 6,
    D3D11_SRV_DIMENSION_TEXTURE2DMSARRAY = 7,
    D3D11_SRV_DIMENSION_TEXTURE3D = 8,
    D3D11_SRV_DIMENSION_TEXTURECUBE = 9,
    D3D11_SRV_DIMENSION_TEXTURECUBEARRAY = 10,
    D3D11_SRV_DIMENSION_BUFFEREX = 11
  );

  D3D11_DSV_DIMENSION =
  (
    D3D11_DSV_DIMENSION_UNKNOWN = 0,
    D3D11_DSV_DIMENSION_TEXTURE1D = 1,
    D3D11_DSV_DIMENSION_TEXTURE1DARRAY = 2,
    D3D11_DSV_DIMENSION_TEXTURE2D = 3,
    D3D11_DSV_DIMENSION_TEXTURE2DARRAY = 4,
    D3D11_DSV_DIMENSION_TEXTURE2DMS = 5,
    D3D11_DSV_DIMENSION_TEXTURE2DMSARRAY = 6
  );

  D3D11_RTV_DIMENSION =
  (
    D3D11_RTV_DIMENSION_UNKNOWN = 0,
    D3D11_RTV_DIMENSION_BUFFER = 1,
    D3D11_RTV_DIMENSION_TEXTURE1D = 2,
    D3D11_RTV_DIMENSION_TEXTURE1DARRAY = 3,
    D3D11_RTV_DIMENSION_TEXTURE2D = 4,
    D3D11_RTV_DIMENSION_TEXTURE2DARRAY = 5,
    D3D11_RTV_DIMENSION_TEXTURE2DMS = 6,
    D3D11_RTV_DIMENSION_TEXTURE2DMSARRAY = 7,
    D3D11_RTV_DIMENSION_TEXTURE3D = 8
  );

  D3D11_UAV_DIMENSION =
  (
    D3D11_UAV_DIMENSION_UNKNOWN = 0,
    D3D11_UAV_DIMENSION_BUFFER = 1,
    D3D11_UAV_DIMENSION_TEXTURE1D = 2,
    D3D11_UAV_DIMENSION_TEXTURE1DARRAY = 3,
    D3D11_UAV_DIMENSION_TEXTURE2D = 4,
    D3D11_UAV_DIMENSION_TEXTURE2DARRAY = 5,
    D3D11_UAV_DIMENSION_TEXTURE3D = 8
  );

  D3D11_USAGE =
  (
    D3D11_USAGE_DEFAULT = 0,
    D3D11_USAGE_IMMUTABLE = 1,
    D3D11_USAGE_DYNAMIC = 2,
    D3D11_USAGE_STAGING = 3
  );

  D3D11_MAP =
  (
    D3D11_MAP_READ                = 1,
    D3D11_MAP_WRITE               = 2,
    D3D11_MAP_READ_WRITE          = 3,
    D3D11_MAP_WRITE_DISCARD       = 4,
    D3D11_MAP_WRITE_NO_OVERWRITE  = 5
  );

  D3D11_CLEAR_FLAG =
  (
    D3D11_CLEAR_DEPTH    = 1,
    D3D11_CLEAR_STENCIL  = 2
  );

  LP_D3D11_RECT = ^D3D11_RECT;
  D3D11_RECT = TRect;

  LP_D3D11_BOX = ^D3D11_BOX;
  D3D11_BOX = record
    left: UINT;
    top: UINT;
    front: UINT;
    right: UINT;
    bottom: UINT;
    back: UINT;
  end;

  D3D11_COMPARISON_FUNC =
  (
    D3D11_COMPARISON_NEVER          = 1,
    D3D11_COMPARISON_LESS           = 2,
    D3D11_COMPARISON_EQUAL          = 3,
    D3D11_COMPARISON_LESS_EQUAL     = 4,
    D3D11_COMPARISON_GREATER        = 5,
    D3D11_COMPARISON_NOT_EQUAL      = 6,
    D3D11_COMPARISON_GREATER_EQUAL  = 7,
    D3D11_COMPARISON_ALWAYS         = 8
  );

  D3D11_DEPTH_WRITE_MASK =
  (
    D3D11_DEPTH_WRITE_MASK_ZERO  = 0,
    D3D11_DEPTH_WRITE_MASK_ALL   = 1
  );

  D3D11_STENCIL_OP =
  (
    D3D11_STENCIL_OP_KEEP      = 1,
    D3D11_STENCIL_OP_ZERO      = 2,
    D3D11_STENCIL_OP_REPLACE   = 3,
    D3D11_STENCIL_OP_INCR_SAT  = 4,
    D3D11_STENCIL_OP_DECR_SAT  = 5,
    D3D11_STENCIL_OP_INVERT    = 6,
    D3D11_STENCIL_OP_INCR      = 7,
    D3D11_STENCIL_OP_DECR      = 8
  );

  D3D11_DEPTH_STENCILOP_DESC = record
    StencilFailOp: D3D11_STENCIL_OP;
    StencilDepthFailOp: D3D11_STENCIL_OP;
    StencilPassOp: D3D11_STENCIL_OP;
    StencilFunc: D3D11_COMPARISON_FUNC;
  end;

  D3D11_DEPTH_STENCIL_DESC = record
    DepthEnable: BOOL;
    DepthWriteMask: D3D11_DEPTH_WRITE_MASK;
    DepthFunc: D3D11_COMPARISON_FUNC;
    StencilEnable: BOOL;
    StencilReadMask: UINT8;
    StencilWriteMask: UINT8;
    FrontFace: D3D11_DEPTH_STENCILOP_DESC;
    BackFace: D3D11_DEPTH_STENCILOP_DESC;
  end;

  D3D11_BLEND =
  (
    D3D11_BLEND_ZERO = 1,
    D3D11_BLEND_ONE = 2,
    D3D11_BLEND_SRC_COLOR = 3,
    D3D11_BLEND_INV_SRC_COLOR = 4,
    D3D11_BLEND_SRC_ALPHA = 5,
    D3D11_BLEND_INV_SRC_ALPHA = 6,
    D3D11_BLEND_DEST_ALPHA = 7,
    D3D11_BLEND_INV_DEST_ALPHA = 8,
    D3D11_BLEND_DEST_COLOR = 9,
    D3D11_BLEND_INV_DEST_COLOR = 10,
    D3D11_BLEND_SRC_ALPHA_SAT = 11,
    D3D11_BLEND_BLEND_FACTOR = 14,
    D3D11_BLEND_INV_BLEND_FACTOR = 15,
    D3D11_BLEND_SRC1_COLOR = 16,
    D3D11_BLEND_INV_SRC1_COLOR = 17,
    D3D11_BLEND_SRC1_ALPHA = 18,
    D3D11_BLEND_INV_SRC1_ALPHA = 19
  );

  D3D11_BLEND_OP =
  (
    D3D11_BLEND_OP_ADD = 1,
    D3D11_BLEND_OP_SUBTRACT = 2,
    D3D11_BLEND_OP_REV_SUBTRACT = 3,
    D3D11_BLEND_OP_MIN = 4,
    D3D11_BLEND_OP_MAX = 5
  );

  D3D11_COLOR_WRITE_ENABLE =
  (
    D3D11_COLOR_WRITE_ENABLE_RED = 1,
    D3D11_COLOR_WRITE_ENABLE_GREEN = 2,
    D3D11_COLOR_WRITE_ENABLE_BLUE = 4,
    D3D11_COLOR_WRITE_ENABLE_ALPHA = 8,
    D3D11_COLOR_WRITE_ENABLE_ALL = ( DWORD(D3D11_COLOR_WRITE_ENABLE_RED) or DWORD(D3D11_COLOR_WRITE_ENABLE_GREEN) or DWORD(D3D11_COLOR_WRITE_ENABLE_BLUE) or DWORD(D3D11_COLOR_WRITE_ENABLE_ALPHA) )
  );

  D3D11_RENDER_TARGET_BLEND_DESC = record
    BlendEnable: BOOL;
    SrcBlend: D3D11_BLEND;
    DestBlend: D3D11_BLEND;
    BlendOp: D3D11_BLEND_OP;
    SrcBlendAlpha: D3D11_BLEND;
    DestBlendAlpha: D3D11_BLEND;
    BlendOpAlpha: D3D11_BLEND_OP;
    RenderTargetWriteMask: UINT8;
  end;

  D3D11_BLEND_DESC = record
    AlphaToCoverageEnable: BOOL;
    IndependentBlendEnable: BOOL;
    RenderTarget: array[0..7] of D3D11_RENDER_TARGET_BLEND_DESC;
  end;

  D3D11_RASTERIZER_DESC = record
    FillMode: D3D11_FILL_MODE;
    CullMode: D3D11_CULL_MODE;
    FrontCounterClockwise: BOOL;
    DepthBias: INT;
    DepthBiasClamp: FLOAT;
    SlopeScaledDepthBias: FLOAT;
    DepthClipEnable: BOOL;
    ScissorEnable: BOOL;
    MultisampleEnable: BOOL;
    AntialiasedLineEnable: BOOL;
  end;

  LP_D3D11_SUBRESOURCE_DATA = ^D3D11_SUBRESOURCE_DATA;
  D3D11_SUBRESOURCE_DATA = record
    pSysMem: Pointer;
    SysMemPitch: UINT;
    SysMemSlicePitch: UINT;
  end;

  D3D11_MAPPED_SUBRESOURCE = record
    pData: Pointer;
    RowPitch: UINT;
    DepthPitch: UINT;
  end;

  D3D11_BUFFER_DESC = record
    ByteWidth: UINT;
    Usage: D3D11_USAGE;
    BindFlags: D3D11_BIND_FLAGS;
    CPUAccessFlags: D3D11_CPU_ACCESS_FLAGS;
    MiscFlags: D3D11_RESOURCE_MISC_FLAGS;
    StructureByteStride: UINT;
  end;

  D3D11_TEXTURE1D_DESC = record
    Width: UINT;
    MipLevels: UINT;
    ArraySize: UINT;
    Format: DXGI_FORMAT;
    Usage: D3D11_USAGE;
    BindFlags: D3D11_BIND_FLAGS;
    CPUAccessFlags: D3D11_CPU_ACCESS_FLAGS;
    MiscFlags: D3D11_RESOURCE_MISC_FLAGS;
  end;

  D3D11_TEXTURE2D_DESC = record
    Width: UINT;
    Height: UINT;
    MipLevels: UINT;
    ArraySize: UINT;
    Format: DXGI_FORMAT;
    SampleDesc: DXGI_SAMPLE_DESC;
    Usage: D3D11_USAGE;
    BindFlags: D3D11_BIND_FLAGS;
    CPUAccessFlags: D3D11_CPU_ACCESS_FLAGS;
    MiscFlags: D3D11_RESOURCE_MISC_FLAGS;
  end;

  D3D11_TEXTURE3D_DESC = record
    Width: UINT;
    Height: UINT;
    Depth: UINT;
    MipLevels: UINT;
    Format: DXGI_FORMAT;
    Usage: D3D11_USAGE;
    BindFlags: D3D11_BIND_FLAGS;
    CPUAccessFlags: D3D11_CPU_ACCESS_FLAGS;
    MiscFlags: D3D11_RESOURCE_MISC_FLAGS;
  end;

  D3D11_TEXTURECUBE_FACE =
  (
    D3D11_TEXTURECUBE_FACE_POSITIVE_X = 0,
    D3D11_TEXTURECUBE_FACE_NEGATIVE_X = 1,
    D3D11_TEXTURECUBE_FACE_POSITIVE_Y = 2,
    D3D11_TEXTURECUBE_FACE_NEGATIVE_Y = 3,
    D3D11_TEXTURECUBE_FACE_POSITIVE_Z = 4,
    D3D11_TEXTURECUBE_FACE_NEGATIVE_Z = 5
  );

  D3D11_BUFFER_SRV = record
    case Byte of
      0: (
           FirstElement: UINT;
           NumElements: UINT;
         );
      1: (
           ElementOffset: UINT;
           ElementWidth: UINT;
         )
  end;

  D3D11_BUFFEREX_SRV = record
    FirstElement: UINT;
    NumElements: UINT;
    Flags: D3D11_BUFFEREX_SRV_FLAGS;
  end;

  D3D11_TEX1D_SRV = record
    MostDetailedMip: UINT;
    MipLevels: UINT;
  end;

  D3D11_TEX1D_ARRAY_SRV = record
    MostDetailedMip: UINT;
    MipLevels: UINT;
    FirstArraySlice: UINT;
    ArraySize: UINT;
  end;

  D3D11_TEX2D_SRV = record
    MostDetailedMip: UINT;
    MipLevels: UINT;
  end;

  D3D11_TEX2D_ARRAY_SRV = record
    MostDetailedMip: UINT;
    MipLevels: UINT;
    FirstArraySlice: UINT;
    ArraySize: UINT;
  end;

  D3D11_TEX3D_SRV = record
    MostDetailedMip: UINT;
    MipLevels: UINT;
  end;

  D3D11_TEXCUBE_SRV = record
    MostDetailedMip: UINT;
    MipLevels: UINT;
  end;

  D3D11_TEXCUBE_ARRAY_SRV = record
    MostDetailedMip: UINT;
    MipLevels: UINT;
    First2DArrayFace: UINT;
    NumCubes: UINT;
  end;

  D3D11_TEX2DMS_SRV = record
    UnusedField_NothingToDefine: UINT;
  end;

  D3D11_TEX2DMS_ARRAY_SRV = record
    FirstArraySlice: UINT;
    ArraySize: UINT;
  end;

  LP_D3D11_SHADER_RESOURCE_VIEW_DESC = ^D3D11_SHADER_RESOURCE_VIEW_DESC;
  D3D11_SHADER_RESOURCE_VIEW_DESC = record
    Format: DXGI_FORMAT;
    ViewDimension: D3D11_SRV_DIMENSION;
    case Byte of
      0:  ( Buffer: D3D11_BUFFER_SRV );
      1:  ( Texture1D: D3D11_TEX1D_SRV );
      2:  ( Texture1DArray: D3D11_TEX1D_ARRAY_SRV );
      3:  ( Texture2D: D3D11_TEX2D_SRV );
      4:  ( Texture2DArray: D3D11_TEX2D_ARRAY_SRV );
      5:  ( Texture2DMS: D3D11_TEX2DMS_SRV );
      6:  ( Texture2DMSArray: D3D11_TEX2DMS_ARRAY_SRV );
      7:  ( Texture3D: D3D11_TEX3D_SRV );
      8:  ( TextureCube: D3D11_TEXCUBE_SRV );
      9:  ( TextureCubeArray: D3D11_TEXCUBE_ARRAY_SRV );
     10:  ( BufferEx: D3D11_BUFFEREX_SRV );
  end;

  D3D11_BUFFER_RTV = record
    case Byte of
      0:  ( FirstElement: UINT;  NumElements: UINT );
      1:  ( ElementOffset: UINT;  ElementWidth: UINT );
  end;

  D3D11_TEX1D_RTV = record
    MipSlice: UINT;
  end;

  D3D11_TEX1D_ARRAY_RTV = record
    MipSlice: UINT;
    FirstArraySlice: UINT;
    ArraySize: UINT;
  end;

  D3D11_TEX2D_RTV = record
    MipSlice: UINT;
  end;

  D3D11_TEX2DMS_RTV = record
    UnusedField_NothingToDefine: UINT;
  end;

  D3D11_TEX2D_ARRAY_RTV = record
    MipSlice: UINT;
    FirstArraySlice: UINT;
    ArraySize: UINT;
  end;

  D3D11_TEX2DMS_ARRAY_RTV = record
    FirstArraySlice: UINT;
    ArraySize: UINT;
  end;

  D3D11_TEX3D_RTV = record
    MipSlice: UINT;
    FirstWSlice: UINT;
    WSize: UINT;
  end;

  LP_D3D11_RENDER_TARGET_VIEW_DESC = ^D3D11_RENDER_TARGET_VIEW_DESC;
  D3D11_RENDER_TARGET_VIEW_DESC = record
    Format: DXGI_FORMAT;
    ViewDimension: D3D11_RTV_DIMENSION;
    case Byte of
      0:  ( Buffer: D3D11_BUFFER_RTV );
      1:  ( Texture1D: D3D11_TEX1D_RTV );
      2:  ( Texture1DArray: D3D11_TEX1D_ARRAY_RTV );
      3:  ( Texture2D: D3D11_TEX2D_RTV );
      4:  ( Texture2DArray: D3D11_TEX2D_ARRAY_RTV );
      5:  ( Texture2DMS: D3D11_TEX2DMS_RTV );
      6:  ( Texture2DMSArray: D3D11_TEX2DMS_ARRAY_RTV );
      7:  ( Texture3D: D3D11_TEX3D_RTV );
  end;

  D3D11_TEX1D_DSV = record
    MipSlice: UINT;
  end;

  D3D11_TEX1D_ARRAY_DSV = record
    MipSlice: UINT;
    FirstArraySlice: UINT;
    ArraySize: UINT;
  end;

  D3D11_TEX2D_DSV = record
    MipSlice: UINT;
  end;

  D3D11_TEX2D_ARRAY_DSV = record
    MipSlice: UINT;
    FirstArraySlice: UINT;
    ArraySize: UINT;
  end;

  D3D11_TEX2DMS_DSV = record
    UnusedField_NothingToDefine: UINT;
  end;

  D3D11_TEX2DMS_ARRAY_DSV = record
    FirstArraySlice: UINT;
    ArraySize: UINT;
  end;

  LP_D3D11_DEPTH_STENCIL_VIEW_DESC = ^D3D11_DEPTH_STENCIL_VIEW_DESC;
  D3D11_DEPTH_STENCIL_VIEW_DESC = record
    Format: DXGI_FORMAT;
    ViewDimension: D3D11_DSV_DIMENSION;
    Flags: D3D11_DSV_FLAGS;
    case Byte of
      0: ( Texture1D: D3D11_TEX1D_DSV );
      1: ( Texture1DArray: D3D11_TEX1D_ARRAY_DSV );
      2: ( Texture2D: D3D11_TEX2D_DSV );
      3: ( Texture2DArray: D3D11_TEX2D_ARRAY_DSV );
      4: ( Texture2DMS: D3D11_TEX2DMS_DSV );
      5: ( Texture2DMSArray: D3D11_TEX2DMS_ARRAY_DSV );
  end;

  D3D11_BUFFER_UAV = record
    FirstElement: UINT;
    NumElements: UINT;
    Flags: D3D11_BUFFER_UAV_FLAGS;
  end;

  D3D11_TEX1D_UAV = record
    MipSlice: UINT;
  end;

  D3D11_TEX1D_ARRAY_UAV = record
    MipSlice: UINT;
    FirstArraySlice: UINT;
    ArraySize: UINT;
  end;

  D3D11_TEX2D_UAV = record
    MipSlice: UINT;
  end;

  D3D11_TEX2D_ARRAY_UAV = record
    MipSlice: UINT;
    FirstArraySlice: UINT;
    ArraySize: UINT;
  end;

  D3D11_TEX3D_UAV = record
    MipSlice: UINT;
    FirstWSlice: UINT;
    WSize: UINT;
  end;

  LP_D3D11_UNORDERED_ACCESS_VIEW_DESC = ^D3D11_UNORDERED_ACCESS_VIEW_DESC;
  D3D11_UNORDERED_ACCESS_VIEW_DESC = record
    Format: DXGI_FORMAT;
    ViewDimension: D3D11_UAV_DIMENSION;
    case Byte of
      0: ( Buffer: D3D11_BUFFER_UAV );
      1: ( Texture1D: D3D11_TEX1D_UAV );
      2: ( Texture1DArray: D3D11_TEX1D_ARRAY_UAV );
      3: ( Texture2D: D3D11_TEX2D_UAV );
      4: ( Texture2DArray: D3D11_TEX2D_ARRAY_UAV );
      5: ( Texture3D: D3D11_TEX3D_UAV );
  end;

  D3D11_FILTER =
  (
    D3D11_FILTER_MIN_MAG_MIP_POINT                           = $0,
    D3D11_FILTER_MIN_MAG_POINT_MIP_LINEAR                    = $1,
    D3D11_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT              = $4,
    D3D11_FILTER_MIN_POINT_MAG_MIP_LINEAR                    = $5,
    D3D11_FILTER_MIN_LINEAR_MAG_MIP_POINT                    = $10,
    D3D11_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR             = $11,
    D3D11_FILTER_MIN_MAG_LINEAR_MIP_POINT                    = $14,
    D3D11_FILTER_MIN_MAG_MIP_LINEAR                          = $15,
    D3D11_FILTER_ANISOTROPIC                                 = $55,
    D3D11_FILTER_COMPARISON_MIN_MAG_MIP_POINT                = $80,
    D3D11_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR         = $81,
    D3D11_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT   = $84,
    D3D11_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR         = $85,
    D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT         = $90,
    D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR  = $91,
    D3D11_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT         = $94,
    D3D11_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR               = $95,
    D3D11_FILTER_COMPARISON_ANISOTROPIC                      = $D5
  );

  D3D11_FILTER_TYPE =
  (
    D3D11_FILTER_TYPE_POINT   = 0,
    D3D11_FILTER_TYPE_LINEAR  = 1
  );

  D3D11_TEXTURE_ADDRESS_MODE =
  (
    D3D11_TEXTURE_ADDRESS_WRAP         = 1,
    D3D11_TEXTURE_ADDRESS_MIRROR       = 2,
    D3D11_TEXTURE_ADDRESS_CLAMP        = 3,
    D3D11_TEXTURE_ADDRESS_BORDER       = 4,
    D3D11_TEXTURE_ADDRESS_MIRROR_ONCE  = 5
  );

  D3D11_SAMPLER_DESC = record
    Filter: D3D11_FILTER;
    AddressU: D3D11_TEXTURE_ADDRESS_MODE;
    AddressV: D3D11_TEXTURE_ADDRESS_MODE;
    AddressW: D3D11_TEXTURE_ADDRESS_MODE;
    MipLODBias: FLOAT;
    MaxAnisotropy: UINT;
    ComparisonFunc: D3D11_COMPARISON_FUNC;
    BorderColor: array[0..3] of Single;  // RGBA
    MinLOD: FLOAT;
    MaxLOD: FLOAT;
  end;

  D3D11_FORMAT_SUPPORT =
  (
    D3D11_FORMAT_SUPPORT_BUFFER                      = $01,
    D3D11_FORMAT_SUPPORT_IA_VERTEX_BUFFER            = $02,
    D3D11_FORMAT_SUPPORT_IA_INDEX_BUFFER             = $04,
    D3D11_FORMAT_SUPPORT_SO_BUFFER                   = $08,
    D3D11_FORMAT_SUPPORT_TEXTURE1D                   = $10,
    D3D11_FORMAT_SUPPORT_TEXTURE2D                   = $20,
    D3D11_FORMAT_SUPPORT_TEXTURE3D                   = $40,
    D3D11_FORMAT_SUPPORT_TEXTURECUBE                 = $80,
    D3D11_FORMAT_SUPPORT_SHADER_LOAD                 = $100,
    D3D11_FORMAT_SUPPORT_SHADER_SAMPLE               = $200,
    D3D11_FORMAT_SUPPORT_SHADER_SAMPLE_COMPARISON    = $400,
    D3D11_FORMAT_SUPPORT_SHADER_SAMPLE_MONO_TEXT     = $800,
    D3D11_FORMAT_SUPPORT_MIP                         = $1000,
    D3D11_FORMAT_SUPPORT_MIP_AUTOGEN                 = $2000,
    D3D11_FORMAT_SUPPORT_RENDER_TARGET               = $4000,
    D3D11_FORMAT_SUPPORT_BLENDABLE                   = $8000,
    D3D11_FORMAT_SUPPORT_DEPTH_STENCIL               = $10000,
    D3D11_FORMAT_SUPPORT_CPU_LOCKABLE                = $20000,
    D3D11_FORMAT_SUPPORT_MULTISAMPLE_RESOLVE         = $40000,
    D3D11_FORMAT_SUPPORT_DISPLAY                     = $80000,
    D3D11_FORMAT_SUPPORT_CAST_WITHIN_BIT_LAYOUT      = $100000,
    D3D11_FORMAT_SUPPORT_MULTISAMPLE_RENDERTARGET    = $200000,
    D3D11_FORMAT_SUPPORT_MULTISAMPLE_LOAD            = $400000,
    D3D11_FORMAT_SUPPORT_SHADER_GATHER               = $800000,
    D3D11_FORMAT_SUPPORT_BACK_BUFFER_CAST            = $1000000,
    D3D11_FORMAT_SUPPORT_TYPED_UNORDERED_ACCESS_VIEW = $2000000,
    D3D11_FORMAT_SUPPORT_SHADER_GATHER_COMPARISON    = $4000000
  );

  D3D11_FORMAT_SUPPORT2 =
  (
    D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_ADD                                = $01,
    D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_BITWISE_OPS                        = $02,
    D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE  = $04,
    D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_EXCHANGE                           = $08,
    D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_SIGNED_MIN_OR_MAX                  = $10,
    D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_UNSIGNED_MIN_OR_MAX                = $20,
    D3D11_FORMAT_SUPPORT2_UAV_TYPED_LOAD                                = $40,
    D3D11_FORMAT_SUPPORT2_UAV_TYPED_STORE                               = $80
  );

  D3D11_QUERY =
  (
    D3D11_QUERY_EVENT = 0,
    D3D11_QUERY_OCCLUSION = ( D3D11_QUERY_EVENT + 1 ) ,
    D3D11_QUERY_TIMESTAMP = ( D3D11_QUERY_OCCLUSION + 1 ) ,
    D3D11_QUERY_TIMESTAMP_DISJOINT = ( D3D11_QUERY_TIMESTAMP + 1 ) ,
    D3D11_QUERY_PIPELINE_STATISTICS = ( D3D11_QUERY_TIMESTAMP_DISJOINT + 1 ) ,
    D3D11_QUERY_OCCLUSION_PREDICATE = ( D3D11_QUERY_PIPELINE_STATISTICS + 1 ) ,
    D3D11_QUERY_SO_STATISTICS = ( D3D11_QUERY_OCCLUSION_PREDICATE + 1 ) ,
    D3D11_QUERY_SO_OVERFLOW_PREDICATE = ( D3D11_QUERY_SO_STATISTICS + 1 ) ,
    D3D11_QUERY_SO_STATISTICS_STREAM0 = ( D3D11_QUERY_SO_OVERFLOW_PREDICATE + 1 ) ,
    D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM0 = ( D3D11_QUERY_SO_STATISTICS_STREAM0 + 1 ) ,
    D3D11_QUERY_SO_STATISTICS_STREAM1 = ( D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM0 + 1 ) ,
    D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM1 = ( D3D11_QUERY_SO_STATISTICS_STREAM1 + 1 ) ,
    D3D11_QUERY_SO_STATISTICS_STREAM2 = ( D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM1 + 1 ) ,
    D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM2 = ( D3D11_QUERY_SO_STATISTICS_STREAM2 + 1 ) ,
    D3D11_QUERY_SO_STATISTICS_STREAM3 = ( D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM2 + 1 ) ,
    D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM3 = ( D3D11_QUERY_SO_STATISTICS_STREAM3 + 1 )
  );

  D3D11_QUERY_DESC = record
    Query: D3D11_QUERY;
    MiscFlags: D3D11_QUERY_MISC_FLAGS;
  end;

  D3D11_QUERY_DATA_TIMESTAMP_DISJOINT = record
    Frequency: UINT64;
    Disjoint: BOOL;
  end;

  D3D11_QUERY_DATA_PIPELINE_STATISTICS = record
    IAVertices: UINT64;
    IAPrimitives: UINT64;
    VSInvocations: UINT64;
    GSInvocations: UINT64;
    GSPrimitives: UINT64;
    CInvocations: UINT64;
    CPrimitives: UINT64;
    PSInvocations: UINT64;
    HSInvocations: UINT64;
    DSInvocations: UINT64;
    CSInvocations: UINT64;
  end;

  D3D11_QUERY_DATA_SO_STATISTICS = record
    NumPrimitivesWritten: UINT64;
    PrimitivesStorageNeeded: UINT64;
  end;

  D3D11_COUNTER =
  (
    D3D11_COUNTER_DEVICE_DEPENDENT_0 = $40000000
  );

  D3D11_COUNTER_TYPE =
  (
    D3D11_COUNTER_TYPE_FLOAT32 = 0,
    D3D11_COUNTER_TYPE_UINT16 = ( D3D11_COUNTER_TYPE_FLOAT32 + 1 ) ,
    D3D11_COUNTER_TYPE_UINT32 = ( D3D11_COUNTER_TYPE_UINT16 + 1 ) ,
    D3D11_COUNTER_TYPE_UINT64 = ( D3D11_COUNTER_TYPE_UINT32 + 1 )
  );

  D3D11_COUNTER_DESC = record
    Counter: D3D11_COUNTER;
    MiscFlags: UINT;  // reserved
  end;

  D3D11_COUNTER_INFO = record
    LastDeviceDependentCounter: D3D11_COUNTER;
    NumSimultaneousCounters: UINT;
    NumDetectableParallelUnits: UINT8;
  end;

  D3D11_STANDARD_MULTISAMPLE_QUALITY_LEVELS =
  (
    D3D11_STANDARD_MULTISAMPLE_PATTERN = INT($FFFFFFFF),
    D3D11_CENTER_MULTISAMPLE_PATTERN   = INT($FFFFFFFE)
  );

  D3D11_DEVICE_CONTEXT_TYPE =
  (
    D3D11_DEVICE_CONTEXT_IMMEDIATE = 0,
    D3D11_DEVICE_CONTEXT_DEFERRED = ( D3D11_DEVICE_CONTEXT_IMMEDIATE + 1 )
  );

  D3D11_CLASS_INSTANCE_DESC = record
    InstanceId: UINT;
    InstanceIndex: UINT;
    TypeId: UINT;
    ConstantBuffer: UINT;
    BaseConstantBufferOffset: UINT;
    BaseTexture: UINT;
    BaseSampler: UINT;
    Created: BOOL;
  end;

  D3D11_FEATURE =
  (
    D3D11_FEATURE_THREADING = 0,
    D3D11_FEATURE_DOUBLES = ( D3D11_FEATURE_THREADING + 1 ) ,
    D3D11_FEATURE_FORMAT_SUPPORT = ( D3D11_FEATURE_DOUBLES + 1 ) ,
    D3D11_FEATURE_FORMAT_SUPPORT2 = ( D3D11_FEATURE_FORMAT_SUPPORT + 1 ) ,
    D3D11_FEATURE_D3D10_X_HARDWARE_OPTIONS = ( D3D11_FEATURE_FORMAT_SUPPORT2 + 1 )
  );

  D3D11_FEATURE_DATA_THREADING = record
    DriverConcurrentCreates: BOOL;
    DriverCommandLists: BOOL;
  end;

  D3D11_FEATURE_DATA_DOUBLES = record
    DoublePrecisionFloatShaderOps: BOOL;
  end;

  D3D11_FEATURE_DATA_FORMAT_SUPPORT = record
    InFormat: DXGI_FORMAT;
    OutFormatSupport: UINT;
  end;

  D3D11_FEATURE_DATA_FORMAT_SUPPORT2 = record
    InFormat: DXGI_FORMAT;
    OutFormatSupport2: UINT;
  end;

  D3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS = record
    ComputeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x: BOOL;
  end;

  ID3D11DeviceChild = interface(IUnknown)
    ['{1841e5c8-16b0-489b-bcc8-44cfb0d5deae}']

    procedure GetDevice(out pDevice: ID3D11Device);  stdcall;

    function GetPrivateData(const guid: TGUID; var DataSize: UINT; pData: Pointer): HRESULT;  stdcall;
    function SetPrivateData(const guid: TGUID; DataSize: UINT; pData: Pointer): HRESULT;  stdcall;

    function SetPrivateDataInterface(const guid: TGUID; pData: IUnknown): HRESULT;  stdcall;
  end;


  ID3D11DepthStencilState = interface(ID3D11DeviceChild)
    ['{03823efb-8d8f-4e1c-9aa2-f64bb2cbfdf1}']

    procedure GetDesc(out Desc: D3D11_DEPTH_STENCIL_DESC);  stdcall;
  end;


  ID3D11BlendState = interface(ID3D11DeviceChild)
    ['{75b68faa-347d-4159-8f45-a0640f01cd9a}']

    procedure GetDesc(out Desc: D3D11_BLEND_DESC);  stdcall;
  end;


  ID3D11RasterizerState = interface(ID3D11DeviceChild)
    ['{9bb4ab81-ab1a-4d8f-b506-fc04200b6ee7}']

    procedure GetDesc(out Desc: D3D11_RASTERIZER_DESC);  stdcall;
  end;


  ID3D11Resource = interface(ID3D11DeviceChild)
    ['{dc8e63f3-d12b-4952-b47b-5e45026a862d}']

    procedure GetType(out ResourceDimension: D3D11_RESOURCE_DIMENSION);  stdcall;

    procedure SetEvictionPriority(EvictionPriority: UINT);  stdcall;
    function GetEvictionPriority(): UINT;  stdcall;
  end;


  ID3D11Buffer = interface(ID3D11Resource)
    ['{48570b85-d1ee-4fcd-a250-eb350722b037}']

    procedure GetDesc(out Desc: D3D11_BUFFER_DESC);  stdcall;
  end;


  ID3D11Texture1D = interface(ID3D11Resource)
    ['{f8fb5c27-c6b3-4f75-a4c8-439af2ef564c}']

    procedure GetDesc(out Desc: D3D11_TEXTURE1D_DESC);  stdcall;
  end;


  ID3D11Texture2D = interface(ID3D11Resource)
    ['{6f15aaf2-d208-4e89-9ab4-489535d34f9c}']

    procedure GetDesc(out Desc: D3D11_TEXTURE2D_DESC);  stdcall;
  end;


  ID3D11Texture3D = interface(ID3D11Resource)
    ['{037e866e-f56d-4357-a8af-9dabbe6e250e}']

    procedure GetDesc(out Desc: D3D11_TEXTURE3D_DESC);  stdcall;
  end;


  ID3D11View = interface(ID3D11DeviceChild)
    ['{839d1216-bb2e-412b-b7f4-a9dbebe08ed1}']

    procedure GetResource(out pResource: ID3D11Resource);  stdcall;
  end;


  ID3D11ShaderResourceView = interface(ID3D11View)
    ['{b0e06fe0-8192-4e1a-b1ca-36d7414710b2}']

    procedure GetDesc(out Desc: D3D11_SHADER_RESOURCE_VIEW_DESC);  stdcall;
  end;


  ID3D11RenderTargetView = interface(ID3D11View)
    ['{dfdba067-0b8d-4865-875b-d7b4516cc164}']

    procedure GetDesc(out Desc: D3D11_RENDER_TARGET_VIEW_DESC);  stdcall;
  end;


  ID3D11DepthStencilView = interface(ID3D11View)
    ['{9fdac92a-1876-48c3-afad-25b94f84a9b6}']

    procedure GetDesc(out Desc: D3D11_DEPTH_STENCIL_VIEW_DESC) stdcall;
  end;


  ID3D11UnorderedAccessView = interface(ID3D11View)
    ['{28acf509-7f5c-48f6-8611-f316010a6380}']

    procedure GetDesc(out Desc: D3D11_UNORDERED_ACCESS_VIEW_DESC);  stdcall;
  end;


  ID3D11VertexShader = interface(ID3D11DeviceChild)
    ['{3b301d64-d678-4289-8897-22f8928b72f3}']
  end;


  ID3D11HullShader = interface(ID3D11DeviceChild)
    ['{8e5c6061-628a-4c8e-8264-bbe45cb3d5dd}']
  end;


  ID3D11DomainShader = interface(ID3D11DeviceChild)
    ['{f582c508-0f36-490c-9977-31eece268cfa}']
  end;


  ID3D11GeometryShader = interface(ID3D11DeviceChild)
    ['{38325b96-effb-4022-ba02-2e795b70275c}']
  end;


  ID3D11PixelShader = interface(ID3D11DeviceChild)
    ['{ea82e40d-51dc-4f33-93d4-db7c9125ae8c}']
  end;


  ID3D11ComputeShader = interface(ID3D11DeviceChild)
    ['{4f5b196e-c2bd-495e-bd01-1fded38e4969}']
  end;


  ID3D11InputLayout = interface(ID3D11DeviceChild)
    ['{e4819ddc-4cf0-4025-bd26-5de82a3e07b7}']
  end;


  ID3D11SamplerState = interface(ID3D11DeviceChild)
    ['{da6fea51-564c-4487-9810-f0d0f9b4e3a5}']

    procedure GetDesc(out Desc: D3D11_SAMPLER_DESC);  stdcall;
  end;


  ID3D11Asynchronous = interface(ID3D11DeviceChild)
    ['{4b35d0cd-1e15-4258-9c98-1b1333f6dd3b}']

    function GetDataSize(): UINT;  stdcall;
  end;


  ID3D11Query = interface(ID3D11Asynchronous)
    ['{d6c00747-87b7-425e-b84d-44d108560afd}']

    procedure GetDesc(out Desc: D3D11_QUERY_DESC);  stdcall;
  end;


  ID3D11Predicate = interface(ID3D11Query)
    ['{9eb576dd-9f77-4d86-81aa-8bab5fe490e2}']
  end;


  ID3D11Counter = interface(ID3D11Asynchronous)
    ['{6e8c49fb-a371-4770-b440-29086022b741}']

    procedure GetDesc(out Desc: D3D11_COUNTER_DESC);  stdcall;
  end;


  ID3D11ClassInstance = interface(ID3D11DeviceChild)
    ['{a6cd7faa-b0b7-4a2f-9436-8662a65797cb}']

    procedure GetClassLinkage(out pLinkage: ID3D11ClassLinkage);  stdcall;
    procedure GetDesc(out Desc: D3D11_CLASS_INSTANCE_DESC);  stdcall;
    procedure GetInstanceName(pInstanceName: LPSTR; var BufferLength: SIZE_T);  stdcall;
    procedure GetTypeName(pTypeName: LPSTR; var BufferLength: SIZE_T);  stdcall;
  end;


  ID3D11ClassLinkage = interface(ID3D11DeviceChild)
    ['{ddf57cba-9543-46e4-a12b-f207a0fe7fed}']

    function GetClassInstance
             (
               pClassInstanceName: LPCSTR; InstanceIndex: UINT;
               out pInstance: ID3D11ClassInstance
             ): HRESULT;  stdcall;

    function CreateClassInstance
             (
               pClassTypeName: LPCSTR;
               ConstantBufferOffset, ConstantVectorOffset, TextureOffset, SamplerOffset: UINT;
               out pInstance: ID3D11ClassInstance
             ): HRESULT;  stdcall;
  end;


  ID3D11CommandList = interface(ID3D11DeviceChild)
    ['{a24bc4d1-769e-43f7-8013-98ff566c18e2}']

    function GetContextFlags(): UINT;  stdcall;
  end;


  ID3D11DeviceContext = interface(ID3D11DeviceChild)
    ['{c0bfa96c-e089-44fb-8eaf-26f8796190da}']

    procedure VSSetConstantBuffers(StartSlot, NumBuffers: UINT; ppConstantBuffers: LP_ID3D11Buffer);  stdcall;
    procedure PSSetShaderResources(StartSlot, NumViews: UINT; ppShaderResourceViews: LP_ID3D11ShaderResourceView);  stdcall;
    procedure PSSetShader(pPixelShader: ID3D11PixelShader; ppClassInstances: LP_ID3D11ClassInstance; NumClassInstances: UINT);  stdcall;
    procedure PSSetSamplers(StartSlot, NumSamplers: UINT; ppSamplers: LP_ID3D11SamplerState);  stdcall;
    procedure VSSetShader(pVertexShader: ID3D11VertexShader; ppClassInstances: LP_ID3D11ClassInstance; NumClassInstances: UINT);  stdcall;

    procedure DrawIndexed(IndexCount, StartIndexLocation: UINT; BaseVertexLocation: INT);  stdcall;
    procedure Draw(VertexCount, StartVertexLocation: UINT);  stdcall;

    function Map(pResource: ID3D11Resource; SubResource: UINT; MapType: D3D11_MAP; MapFlags: D3D11_MAP_FLAGS; out pMappedResource: D3D11_MAPPED_SUBRESOURCE): HRESULT;  stdcall;
    procedure Unmap(pResource: ID3D11Resource; SubResource: UINT);  stdcall;

    procedure PSSetConstantBuffers(StartSlot, NumBuffers: UINT; ppConstantBuffer: LP_ID3D11Buffer);  stdcall;

    procedure IASetInputLayout(pInputLayout: ID3D11InputLayout);  stdcall;
    procedure IASetVertexBuffers(StartSlot, NumBuffers: UINT; ppVertexBuffers: LP_ID3D11Buffer; pStrides, pOffsets: LP_UINT);  stdcall;
    procedure IASetIndexBuffer(pIndexBuffer: ID3D11Buffer; Format: DXGI_FORMAT; Offset: UINT);  stdcall;

    procedure DrawIndexedInstanced(IndexCountPerInstance, InstanceCount, StartIndexLocation: UINT; BaseVertexLocation: INT; StartInstanceLocation: UINT);  stdcall;
    procedure DrawInstanced(VertexCountPerInstance, InstanceCount, StartVertexLocation, StartInstanceLocation: UINT);  stdcall;

    procedure GSSetConstantBuffers(StartSlot, NumBuffers: UINT; ppConstantBuffers: LP_ID3D11Buffer);  stdcall;
    procedure GSSetShader(pShader: ID3D11GeometryShader; ppClassInstances: LP_ID3D11ClassInstance; NumClassInstances: UINT);  stdcall;

    procedure IASetPrimitiveTopology(Topology: D3D11_PRIMITIVE_TOPOLOGY);  stdcall;

    procedure VSSetShaderResources(StartSlot, NumViews: UINT; ppShaderResourceViews: LP_ID3D11ShaderResourceView);  stdcall;
    procedure VSSetSamplers(StartSlot,  NumSamplers: UINT; ppSamplers: LP_ID3D11SamplerState);  stdcall;

    procedure Begin_(pAsync: ID3D11Asynchronous);  stdcall;
    procedure End_(pAsync: ID3D11Asynchronous);  stdcall;

    function GetData(pAsync: ID3D11Asynchronous; pData: Pointer; DataSize: UINT; GetDataFlags: D3D11_ASYNC_GETDATA_FLAGS): HRESULT;  stdcall;

    procedure SetPredication(pPredicate: ID3D11Predicate; PredicateValue: BOOL);  stdcall;

    procedure GSSetShaderResources(StartSlot, NumViews: UINT;  ppShaderResourceViews: LP_ID3D11ShaderResourceView);  stdcall;
    procedure GSSetSamplers(StartSlot, NumSamplers: UINT; ppSamplers: LP_ID3D11SamplerState);  stdcall;

    procedure OMSetRenderTargets(NumViews: UINT; ppRenderTargetViews: LP_ID3D11RenderTargetView; pDepthStencilView: ID3D11DepthStencilView);  stdcall;
    procedure OMSetRenderTargetsAndUnorderedAccessViews(NumRTVs: UINT; ppRenderTargetViews: LP_ID3D11RenderTargetView; pDepthStencilView: ID3D11DepthStencilView; UAVStartSlot, NumUAVs: UINT; ppUnorderedAccessViews: LP_ID3D11UnorderedAccessView; pUAVInitialCounts: LP_UINT);  stdcall;

    procedure OMSetBlendState(pBlendState: ID3D11BlendState; const BlendFactor: D3D_RGBA_FLOAT; SampleMask: UINT);  stdcall;
    procedure OMSetDepthStencilState(pDepthStencilState: ID3D11DepthStencilState; StencilRef: UINT);  stdcall;

    procedure SOSetTargets(NumBuffers: UINT; ppSOTargets: LP_ID3D11Buffer; pOffsets: LP_UINT);  stdcall;

    procedure DrawAuto();  stdcall;

    procedure DrawIndexedInstancedIndirect(pBufferForArgs: ID3D11Buffer; AlignedByteOffsetForArgs: UINT);  stdcall;
    procedure DrawInstancedIndirect(pBufferForArgs: ID3D11Buffer; AlignedByteOffsetForArgs: UINT);  stdcall;

    procedure Dispatch(ThreadGroupCountX, ThreadGroupCountY, ThreadGroupCountZ: UINT);  stdcall;
    procedure DispatchIndirect(pBufferForArgs: ID3D11Buffer; AlignedByteOffsetForArgs: UINT);  stdcall;

    procedure RSSetState(pRasterizerState: ID3D11RasterizerState);  stdcall;
    procedure RSSetViewports(NumViewports: UINT; pViewports: LP_D3D11_VIEWPORT);  stdcall;
    procedure RSSetScissorRects(NumRects: UINT; pRects: LP_D3D11_RECT);  stdcall;

    procedure CopySubresourceRegion(pDstResource: ID3D11Resource; DstSubresource: UINT; DstX, DstY, DstZ: UINT; pSrcResource: ID3D11Resource; SrcSubresource: UINT; pSrcBox: LP_D3D11_BOX);  stdcall;
    procedure CopyResource(pDstResource, pSrcResource: ID3D11Resource);  stdcall;

    procedure UpdateSubresource(pDstResource: ID3D11Resource; DstSubresource: UINT; pDstBox: LP_D3D11_BOX; pSrcData: Pointer; SrcRowPitch, SrcDepthPitch: UINT);  stdcall;

    procedure CopyStructureCount(pDstBuffer: ID3D11Buffer; DstAlignedByteOffset: UINT; pSrcView: ID3D11UnorderedAccessView);  stdcall;

    procedure ClearRenderTargetView(pRenderTargetView: ID3D11RenderTargetView; const ColorRGBA: D3D_RGBA_FLOAT);  stdcall;
    procedure ClearUnorderedAccessViewUint(pUnorderedAccessView: ID3D11UnorderedAccessView; const Values: D3D_RGBA_UINT);  stdcall;
    procedure ClearUnorderedAccessViewFloat(pUnorderedAccessView: ID3D11UnorderedAccessView; const Values: D3D_RGBA_FLOAT);  stdcall;
    procedure ClearDepthStencilView(pDepthStencilView: ID3D11DepthStencilView; ClearFlags: D3D11_CLEAR_FLAG; Depth: FLOAT; Stencil: UINT8);  stdcall;

    procedure GenerateMips(pShaderResourceView: ID3D11ShaderResourceView);  stdcall;

    procedure SetResourceMinLOD(pResource: ID3D11Resource; MinLOD: FLOAT);  stdcall;
    function GetResourceMinLOD(pResource: ID3D11Resource): FLOAT;  stdcall;

    procedure ResolveSubresource(pDstResource: ID3D11Resource; DstSubresource: UINT; pSrcResource: ID3D11Resource; rcSubresource: UINT; Format: DXGI_FORMAT);  stdcall;

    procedure ExecuteCommandList(pCommandList: ID3D11CommandList; RestoreContextState: BOOL);  stdcall;

    procedure HSSetShaderResources(StartSlot, NumViews: UINT; ppShaderResourceViews: LP_ID3D11ShaderResourceView);  stdcall;
    procedure HSSetShader(pHullShader: ID3D11HullShader; ppClassInstances: LP_ID3D11ClassInstance; NumClassInstances: UINT);  stdcall;
    procedure HSSetSamplers(StartSlot, NumSamplers: UINT; ppSamplers: LP_ID3D11SamplerState);  stdcall;
    procedure HSSetConstantBuffers(StartSlot, NumBuffers: UINT; ppConstantBuffers: LP_ID3D11Buffer);  stdcall;

    procedure DSSetShaderResources(StartSlot, NumViews: UINT; ppShaderResourceViews: LP_ID3D11ShaderResourceView);  stdcall;
    procedure DSSetShader(pDomainShader: ID3D11DomainShader; ppClassInstances: LP_ID3D11ClassInstance; NumClassInstances: UINT);  stdcall;
    procedure DSSetSamplers(StartSlot, NumSamplers: UINT; ppSamplers: LP_ID3D11SamplerState);  stdcall;
    procedure DSSetConstantBuffers(StartSlot, NumBuffers: UINT; ppConstantBuffers: LP_ID3D11Buffer);  stdcall;

    procedure CSSetShaderResources(StartSlot, NumViews: UINT; ppShaderResourceViews: LP_ID3D11ShaderResourceView);  stdcall;
    procedure CSSetUnorderedAccessViews(StartSlot, NumUAVs: UINT; ppUnorderedAccessViews: LP_ID3D11UnorderedAccessView; pUAVInitialCounts: LP_UINT);  stdcall;
    procedure CSSetShader(pComputeShader: ID3D11ComputeShader; ppClassInstances: LP_ID3D11ClassInstance; NumClassInstances: UINT);  stdcall;
    procedure CSSetSamplers(StartSlot, NumSamplers: UINT; ppSamplers: LP_ID3D11SamplerState);  stdcall;
    procedure CSSetConstantBuffers(StartSlot, NumBuffers: UINT; ppConstantBuffers: LP_ID3D11Buffer);  stdcall;

    procedure VSGetConstantBuffers(StartSlot, NumBuffers: UINT; {out} ppConstantBuffers: LP_ID3D11Buffer);  stdcall;

    procedure PSGetShaderResources(StartSlot, NumViews: UINT; ppShaderResourceViews: LP_ID3D11ShaderResourceView);  stdcall;
    procedure PSGetShader(out pPixelShader: ID3D11PixelShader; {out} ppClassInstances: LP_ID3D11ClassInstance; var NumClassInstances: UINT);  stdcall;
    procedure PSGetSamplers(StartSlot, NumSamplers: UINT; {out} ppSamplers: LP_ID3D11SamplerState);  stdcall;

    procedure VSGetShader(out ppVertexShader: ID3D11VertexShader; {out} ppClassInstances: LP_ID3D11ClassInstance; var NumClassInstances: UINT);  stdcall;

    procedure PSGetConstantBuffers(StartSlot, NumBuffers: UINT; {out} ppConstantBuffers: LP_ID3D11Buffer);  stdcall;

    procedure IAGetInputLayout(out pInputLayout: ID3D11InputLayout);  stdcall;
    procedure IAGetVertexBuffers(StartSlot, NumBuffers: UINT; {out} ppVertexBuffers: LP_ID3D11Buffer; {out} pStrides, pOffsets: LP_UINT);  stdcall;
    procedure IAGetIndexBuffer(out pIndexBuffer: ID3D11Buffer; out Format: DXGI_FORMAT; out Offset: UINT);  stdcall;

    procedure GSGetConstantBuffers(StartSlot, NumBuffers: UINT; {out} ppConstantBuffers: LP_ID3D11Buffer);  stdcall;
    procedure GSGetShader(out ppGeometryShader: ID3D11GeometryShader; {out} ppClassInstances: LP_ID3D11ClassInstance; var pNumClassInstances: UINT);  stdcall;

    procedure IAGetPrimitiveTopology(out Topology: D3D11_PRIMITIVE_TOPOLOGY);  stdcall;

    procedure VSGetShaderResources(StartSlot, NumViews: UINT; {out} ppShaderResourceViews: LP_ID3D11ShaderResourceView);  stdcall;
    procedure VSGetSamplers(StartSlot, NumSamplers: UINT; {out} ppSamplers: LP_ID3D11SamplerState);  stdcall;

    procedure GetPredication(out pPredicate: ID3D11Predicate; out PredicateValue: BOOL);  stdcall;

    procedure GSGetShaderResources(StartSlot, NumViews: UINT; {out} ppShaderResourceViews: LP_ID3D11ShaderResourceView);  stdcall;
    procedure GSGetSamplers(StartSlot, NumSamplers: UINT; {out} ppSamplers: LP_ID3D11SamplerState);  stdcall;

    procedure OMGetRenderTargets(NumViews: UINT; {out} ppRenderTargetViews: LP_ID3D11RenderTargetView; out ppDepthStencilView: ID3D11DepthStencilView);  stdcall;
    procedure OMGetRenderTargetsAndUnorderedAccessViews(NumRTVs: UINT; {out} ppRenderTargetViews: LP_ID3D11RenderTargetView; out ppDepthStencilView: ID3D11DepthStencilView; UAVStartSlot, NumUAVs: UINT; {out} ppUnorderedAccessViews: LP_ID3D11UnorderedAccessView);  stdcall;
    procedure OMGetBlendState(out pBlendState: ID3D11BlendState; out BlendFactor: D3D_RGBA_FLOAT; out SampleMask: UINT);  stdcall;
    procedure OMGetDepthStencilState(out ppDepthStencilState: ID3D11DepthStencilState; out pStencilRef: UINT);  stdcall;

    procedure SOGetTargets(NumBuffers: UINT; {out} ppSOTargets: LP_ID3D11Buffer);  stdcall;

    procedure RSGetState(out ppRasterizerState: ID3D11RasterizerState);  stdcall;
    procedure RSGetViewports(var NumViewports: UINT; {out} pViewports: LP_D3D11_VIEWPORT);  stdcall;
    procedure RSGetScissorRects(var NumRects: UINT; {out} pRects: LP_D3D11_RECT);  stdcall;

    procedure HSGetShaderResources(StartSlot, NumViews: UINT; {out} ppShaderResourceViews: LP_ID3D11ShaderResourceView);  stdcall;
    procedure HSGetShader(out ppHullShader: ID3D11HullShader; {out} ppClassInstances: LP_ID3D11ClassInstance; var NumClassInstances: UINT);  stdcall;
    procedure HSGetSamplers(StartSlot, NumSamplers: UINT; {out} ppSamplers: LP_ID3D11SamplerState);  stdcall;
    procedure HSGetConstantBuffers(StartSlot, NumBuffers: UINT; {out} ppConstantBuffers: LP_ID3D11Buffer);  stdcall;

    procedure DSGetShaderResources(StartSlot, NumViews: UINT; {out} ppShaderResourceViews: LP_ID3D11ShaderResourceView);  stdcall;
    procedure DSGetShader(out pDomainShader: ID3D11DomainShader; {out} ppClassInstances: LP_ID3D11ClassInstance; var NumClassInstances: UINT);  stdcall;
    procedure DSGetSamplers(StartSlot, NumSamplers: UINT; {out} ppSamplers: LP_ID3D11SamplerState);  stdcall;
    procedure DSGetConstantBuffers(StartSlot, NumBuffers: UINT; {out} ppConstantBuffers: LP_ID3D11Buffer);  stdcall;

    procedure CSGetShaderResources(StartSlot, NumViews: UINT; {out} ppShaderResourceViews: LP_ID3D11ShaderResourceView);  stdcall;
    procedure CSGetUnorderedAccessViews(StartSlot, NumUAVs: UINT; {out} ppUnorderedAccessViews: LP_ID3D11UnorderedAccessView);  stdcall;
    procedure CSGetShader(out ppComputeShader: ID3D11ComputeShader; {out} ppClassInstances: LP_ID3D11ClassInstance; var NumClassInstances: UINT);  stdcall;
    procedure CSGetSamplers(StartSlot, NumSamplers: UINT; {out} ppSamplers: LP_ID3D11SamplerState);  stdcall;
    procedure CSGetConstantBuffers(StartSlot, NumBuffers: UINT; {out} ppConstantBuffers: LP_ID3D11Buffer);  stdcall;

    procedure ClearState();  stdcall;

    procedure Flush();  stdcall;

    function GetType(): D3D11_DEVICE_CONTEXT_TYPE;  stdcall;

    function GetContextFlags(): UINT;  stdcall;

    function FinishCommandList(RestoreDeferredContextState: BOOL; out ppCommandList: ID3D11CommandList): HRESULT;  stdcall;
  end;


  ID3D11Device = interface(IUnknown)
    ['{db6f6ddb-ac77-4e88-8253-819df9bbf140}']

    function CreateBuffer(const Desc: D3D11_BUFFER_DESC; pInitialData: LP_D3D11_SUBRESOURCE_DATA; out pBuffer: ID3D11Buffer): HRESULT;  stdcall;
    function CreateTexture1D(const Desc: D3D11_TEXTURE1D_DESC; pInitialData: LP_D3D11_SUBRESOURCE_DATA; out pTexture1D: ID3D11Texture1D): HRESULT;  stdcall;
    function CreateTexture2D(const Desc: D3D11_TEXTURE2D_DESC; pInitialData: LP_D3D11_SUBRESOURCE_DATA; out pTexture2D: ID3D11Texture2D): HRESULT;  stdcall;
    function CreateTexture3D(const Desc: D3D11_TEXTURE3D_DESC; pInitialData: LP_D3D11_SUBRESOURCE_DATA; out pTexture3D: ID3D11Texture3D): HRESULT;  stdcall;
    function CreateShaderResourceView(pResource: ID3D11Resource; Desc: LP_D3D11_SHADER_RESOURCE_VIEW_DESC; out pSRView: ID3D11ShaderResourceView): HRESULT;  stdcall;
    function CreateUnorderedAccessView(pResource: ID3D11Resource; Desc: LP_D3D11_UNORDERED_ACCESS_VIEW_DESC; out pUAView: ID3D11UnorderedAccessView): HRESULT;  stdcall;
    function CreateRenderTargetView(pResource: ID3D11Resource; Desc: LP_D3D11_RENDER_TARGET_VIEW_DESC; out pRTView: ID3D11RenderTargetView): HRESULT;  stdcall;
    function CreateDepthStencilView(pResource: ID3D11Resource; Desc: LP_D3D11_DEPTH_STENCIL_VIEW_DESC; out pDepthStencilView: ID3D11DepthStencilView): HRESULT;  stdcall;
    function CreateInputLayout(pInputElementDescs: LP_D3D11_INPUT_ELEMENT_DESC; NumElements: UINT; pShaderBytecodeWithInputSignature: Pointer; BytecodeLength: SIZE_T; out ppInputLayout: ID3D11InputLayout): HRESULT;  stdcall;
    function CreateVertexShader(pShaderBytecode: Pointer; BytecodeLength: SIZE_T; pClassLinkage: ID3D11ClassLinkage; out pVertexShader: ID3D11VertexShader): HRESULT;  stdcall;
    function CreateGeometryShader(pShaderBytecode: Pointer; BytecodeLength: SIZE_T; pClassLinkage: ID3D11ClassLinkage; out pGeometryShader: ID3D11GeometryShader): HRESULT;  stdcall;
    function CreateGeometryShaderWithStreamOutput(pShaderBytecode: Pointer; BytecodeLength: SIZE_T; pSODeclaration: LP_D3D11_SO_DECLARATION_ENTRY; NumEntries: UINT; pBufferStrides: LP_UINT; NumStrides: UINT; RasterizedStream: UINT; pClassLinkage: ID3D11ClassLinkage; out pGeometryShader: ID3D11GeometryShader): HRESULT;  stdcall;
    function CreatePixelShader(pShaderBytecode: Pointer; BytecodeLength: SIZE_T; pClassLinkage: ID3D11ClassLinkage; out pPixelShader: ID3D11PixelShader): HRESULT;  stdcall;
    function CreateHullShader(pShaderBytecode: Pointer; BytecodeLength: SIZE_T; pClassLinkage: ID3D11ClassLinkage; out pHullShader: ID3D11HullShader): HRESULT;  stdcall;
    function CreateDomainShader(pShaderBytecode: Pointer; BytecodeLength: SIZE_T; pClassLinkage: ID3D11ClassLinkage; out pDomainShader: ID3D11DomainShader): HRESULT;  stdcall;
    function CreateComputeShader(pShaderBytecode: Pointer; BytecodeLength: SIZE_T; pClassLinkage: ID3D11ClassLinkage; out pComputeShader: ID3D11ComputeShader): HRESULT;  stdcall;
    function CreateClassLinkage(out pLinkage: ID3D11ClassLinkage): HRESULT;  stdcall;
    function CreateBlendState(const BlendStateDesc: D3D11_BLEND_DESC; out pBlendState: ID3D11BlendState): HRESULT;  stdcall;
    function CreateDepthStencilState(const DepthStencilDesc: D3D11_DEPTH_STENCIL_DESC; out pDepthStencilState: ID3D11DepthStencilState): HRESULT;  stdcall;
    function CreateRasterizerState(const RasterizerDesc: D3D11_RASTERIZER_DESC; out pRasterizerState: ID3D11RasterizerState): HRESULT;  stdcall;
    function CreateSamplerState(const SamplerDesc: D3D11_SAMPLER_DESC; out pSamplerState: ID3D11SamplerState): HRESULT;  stdcall;
    function CreateQuery(const QueryDesc: D3D11_QUERY_DESC; out pQuery: ID3D11Query): HRESULT;  stdcall;
    function CreatePredicate(const PredicateDesc: D3D11_QUERY_DESC; out pPredicate: ID3D11Predicate): HRESULT;  stdcall;
    function CreateCounter(const CounterDesc: D3D11_COUNTER_DESC; out pCounter: ID3D11Counter): HRESULT;  stdcall;
    function CreateDeferredContext(ContextFlags: UINT; out pDeferredContext: ID3D11DeviceContext): HRESULT;  stdcall;

    function OpenSharedResource(hResource: HANDLE; const ReturnedInterface: TGUID; out pResource): HRESULT;  stdcall;

    function CheckFormatSupport(Format: DXGI_FORMAT; out FormatSupport: UINT): HRESULT;  stdcall;
    function CheckMultisampleQualityLevels(Format: DXGI_FORMAT; SampleCount: UINT; out NumQualityLevels: UINT): HRESULT;  stdcall;
    procedure CheckCounterInfo(out CounterInfo: D3D11_COUNTER_INFO);  stdcall;
    function CheckCounter(const Desc: D3D11_COUNTER_DESC; out Type_: D3D11_COUNTER_TYPE; out pActiveCounters: UINT;
                         szName: LPSTR; var UnitsLength: UINT;
                         szDescription: LPSTR; var DescriptionLength: UINT): HRESULT;  stdcall;
    function CheckFeatureSupport(Feature: D3D11_FEATURE; pFeatureSupportData: Pointer; FeatureSupportDataSize: UINT): HRESULT;  stdcall;

    function GetPrivateData(const guid: TGUID; var DataSize: UINT; pData: Pointer): HRESULT;  stdcall;
    function SetPrivateData(const guid: TGUID; DataSize: UINT; pData: Pointer): HRESULT;  stdcall;
    function SetPrivateDataInterface(const guid: TGUID; pData: IUnknown): HRESULT;  stdcall;

    function GetFeatureLevel(): D3D11_FEATURE_LEVEL;  stdcall;
    function GetCreationFlags(): D3D11_CREATE_DEVICE_FLAGS;  stdcall;

    function GetDeviceRemovedReason(): HRESULT;  stdcall;

    procedure GetImmediateContext(out pImmediateContext: ID3D11DeviceContext);  stdcall;

    function SetExceptionMode(RaiseFlags: D3D11_RAISE_FLAGS): HRESULT;  stdcall;
    function GetExceptionMode(): D3D11_RAISE_FLAGS;  stdcall;
  end;


// #include "d3d11sdklayers.h"

///////////////////////////////////////////////////////////////////////////
// D3D11CreateDevice
// ------------------
//
// pAdapter
//      If NULL, D3D11CreateDevice will choose the primary adapter and
//      create a new instance from a temporarily created IDXGIFactory.
//      If non-NULL, D3D11CreateDevice will register the appropriate
//      device, if necessary (via IDXGIAdapter::RegisterDrver), before
//      creating the device.
// DriverType
//      Specifies the driver type to be created: hardware, reference or
//      null.
// Software
//      HMODULE of a DLL implementing a software rasterizer. Must be NULL for
//      non-Software driver types.
// Flags
//      Any of those documented for D3D11CreateDeviceAndSwapChain.
// pFeatureLevels
//      Any of those documented for D3D11CreateDeviceAndSwapChain.
// FeatureLevels
//      Size of feature levels array.
// SDKVersion
//      SDK version. Use the D3D11_SDK_VERSION macro.
// ppDevice
//      Pointer to returned interface. May be NULL.
// pFeatureLevel
//      Pointer to returned feature level. May be NULL.
// ppImmediateContext
//      Pointer to returned interface. May be NULL.
//
// Return Values
//  Any of those documented for
//          CreateDXGIFactory1
//          IDXGIFactory::EnumAdapters
//          IDXGIAdapter::RegisterDriver
//          D3D11CreateDevice
//
///////////////////////////////////////////////////////////////////////////
{
  typedef HRESULT (WINAPI* PFN_D3D11_CREATE_DEVICE)( __in_opt IDXGIAdapter*,
    D3D_DRIVER_TYPE, HMODULE, UINT,
    __in_ecount_opt( FeatureLevels ) CONST D3D_FEATURE_LEVEL*,
    UINT FeatureLevels, UINT, __out_opt ID3D11Device**,
    __out_opt D3D_FEATURE_LEVEL*, __out_opt ID3D11DeviceContext** );
}

  function D3D11CreateDevice
           (
             pAdapter: IDXGIAdapter;
             DriverType: D3D11_DRIVER_TYPE;
             Software: HMODULE;
             Flags: D3D11_CREATE_DEVICE_FLAGS;
             const pFeatureLevels: LP_D3D_FEATURE_LEVEL;
             nFeatureLevels: UINT;
             SDKVersion: UINT;
             {out} pDevice: LP_ID3D11Device;
             {out} pFeatureLevel: LP_D3D_FEATURE_LEVEL;
             {out} pImmediateContext: LP_ID3D11DeviceContext
           ): HRESULT;  stdcall;

///////////////////////////////////////////////////////////////////////////
// D3D11CreateDeviceAndSwapChain
// ------------------------------
//
// ppAdapter
//      If NULL, D3D11CreateDevice will choose the primary adapter and
//      create a new instance from a temporarily created IDXGIFactory.
//      If non-NULL, D3D11CreateDevice will register the appropriate
//      device, if necessary (via IDXGIAdapter::RegisterDrver), before
//      creating the device.
// DriverType
//      Specifies the driver type to be created: hardware, reference or
//      null.
// Software
//      HMODULE of a DLL implementing a software rasterizer. Must be NULL for
//      non-Software driver types.
// Flags
//      Any of those documented for D3D11CreateDevice.
// pFeatureLevels
//      Array of any of the following:
//          D3D_FEATURE_LEVEL_11_0
//          D3D_FEATURE_LEVEL_10_1
//          D3D_FEATURE_LEVEL_10_0
//          D3D_FEATURE_LEVEL_9_3
//          D3D_FEATURE_LEVEL_9_2
//          D3D_FEATURE_LEVEL_9_1
//      Order indicates sequence in which instantiation will be attempted. If
//      NULL, then the implied order is the same as previously listed (i.e.
//      prefer most features available).
// FeatureLevels
//      Size of feature levels array.
// SDKVersion
//      SDK version. Use the D3D11_SDK_VERSION macro.
// pSwapChainDesc
//      Swap chain description, may be NULL.
// ppSwapChain
//      Pointer to returned interface. May be NULL.
// ppDevice
//      Pointer to returned interface. May be NULL.
// pFeatureLevel
//      Pointer to returned feature level. May be NULL.
// ppImmediateContext
//      Pointer to returned interface. May be NULL.
//
// Return Values
//  Any of those documented for
//          CreateDXGIFactory1
//          IDXGIFactory::EnumAdapters
//          IDXGIAdapter::RegisterDriver
//          D3D11CreateDevice
//          IDXGIFactory::CreateSwapChain
//
///////////////////////////////////////////////////////////////////////////
{
  typedef HRESULT (WINAPI* PFN_D3D11_CREATE_DEVICE_AND_SWAP_CHAIN)( __in_opt IDXGIAdapter*,
    D3D_DRIVER_TYPE, HMODULE, UINT,
    __in_ecount_opt( FeatureLevels ) CONST D3D_FEATURE_LEVEL*,
    UINT FeatureLevels, UINT, __in_opt CONST DXGI_SWAP_CHAIN_DESC*,
    __out_opt IDXGISwapChain**, __out_opt ID3D11Device**,
    __out_opt D3D_FEATURE_LEVEL*, __out_opt ID3D11DeviceContext** );
}

  function D3D11CreateDeviceAndSwapChain
           (
             pAdapter: IDXGIAdapter;
             DriverType: D3D11_DRIVER_TYPE;
             Software: HMODULE;
             Flags: D3D11_CREATE_DEVICE_FLAGS;
             pFeatureLevels: LP_D3D_FEATURE_LEVEL;
             nFeatureLevels: UINT;
             SDKVersion: UINT;
             const SwapChainDesc: DXGI_SWAP_CHAIN_DESC;
             {out} pSwapChain: LP_IDXGISwapChain;
             {out} pDevice: LP_ID3D11Device;
             {out} pFeatureLevel: LP_D3D_FEATURE_LEVEL;
             {out} pImmediateContext: LP_ID3D11DeviceContext
           ): HRESULT;  stdcall;


  function D3D11CalcSubresource(MipSlice, ArraySlice: UINT; MipLevels: UINT): UINT;  inline;

  function D3D11_ENCODE_BASIC_FILTER(min, mag, mip: UINT; bComparison: Boolean): D3D11_FILTER;  inline;
  function D3D11_ENCODE_ANISOTROPIC_FILTER(bComparison: BOOL): D3D11_FILTER;  inline;
  function D3D11_DECODE_MIN_FILTER(d3d11Filter: UINT): D3D11_FILTER_TYPE;  inline;
  function D3D11_DECODE_MAG_FILTER(d3d11Filter: UINT): D3D11_FILTER_TYPE;  inline;
  function D3D11_DECODE_MIP_FILTER(d3d11Filter: UINT): D3D11_FILTER_TYPE;  inline;
  function D3D11_DECODE_IS_COMPARISON_FILTER(d3d11Filter: UINT): Boolean;  inline;
  function D3D11_DECODE_IS_ANISOTROPIC_FILTER(d3d11Filter: UINT): Boolean;  inline;

  function D3D11_SHVER_GET_TYPE(_Version: DWORD): DWORD;  inline;
  function D3D11_SHVER_GET_MAJOR(_Version: DWORD): DWORD;  inline;
  function D3D11_SHVER_GET_MINOR(_Version: DWORD): DWORD;  inline;

  // helper functions

  function D3D11_Rect_(left, top, right, bottom: Longint): D3D11_RECT;  inline;
  function D3D11_Box_(left, top, front, right, bottom, back: UINT): D3D11_BOX;  inline;

  function D3D11_RGBA_FLOAT(r, g, b: FLOAT; a: FLOAT = 1.0): D3D_RGBA_FLOAT;  inline;

  function D3D11_DepthStencilDesc
           (
             depthEnable: BOOL = TRUE;
             depthWriteMask: D3D11_DEPTH_WRITE_MASK = D3D11_DEPTH_WRITE_MASK_ALL;
             depthFunc: D3D11_COMPARISON_FUNC = D3D11_COMPARISON_LESS;
             stencilEnable: BOOL = FALSE;
             stencilReadMask: UINT8 = D3D11_DEFAULT_STENCIL_READ_MASK;
             stencilWriteMask: UINT8 = D3D11_DEFAULT_STENCIL_WRITE_MASK;
             frontStencilFailOp: D3D11_STENCIL_OP = D3D11_STENCIL_OP_KEEP;
             frontStencilDepthFailOp: D3D11_STENCIL_OP = D3D11_STENCIL_OP_KEEP;
             frontStencilPassOp: D3D11_STENCIL_OP = D3D11_STENCIL_OP_KEEP;
             frontStencilFunc: D3D11_COMPARISON_FUNC = D3D11_COMPARISON_ALWAYS;
             backStencilFailOp: D3D11_STENCIL_OP = D3D11_STENCIL_OP_KEEP;
             backStencilDepthFailOp: D3D11_STENCIL_OP = D3D11_STENCIL_OP_KEEP;
             backStencilPassOp: D3D11_STENCIL_OP = D3D11_STENCIL_OP_KEEP;
             backStencilFunc: D3D11_COMPARISON_FUNC = D3D11_COMPARISON_ALWAYS
           ): D3D11_DEPTH_STENCIL_DESC;  inline;
  function D3D11_RasterizerDesc
           (
             fillMode: D3D11_FILL_MODE = D3D11_FILL_SOLID;
             cullMode: D3D11_CULL_MODE = D3D11_CULL_BACK;
             frontCounterClockwise: BOOL = FALSE;
             depthBias: INT = D3D11_DEFAULT_DEPTH_BIAS;
             depthBiasClamp: FLOAT = D3D11_DEFAULT_DEPTH_BIAS_CLAMP;
             slopeScaledDepthBias: FLOAT = D3D11_DEFAULT_SLOPE_SCALED_DEPTH_BIAS;
             depthClipEnable: BOOL = TRUE;
             scissorEnable: BOOL = FALSE;
             multisampleEnable: BOOL = FALSE;
             antialiasedLineEnable: BOOL = FALSE
           ): D3D11_RASTERIZER_DESC;  inline;
  function D3D11_BufferDesc
           (
             byteWidth: UINT;
             bindFlags: UINT;
             usage: D3D11_USAGE = D3D11_USAGE_DEFAULT;
             cpuaccessFlags: D3D11_CPU_ACCESS_FLAGS = 0;
             miscFlags: D3D11_RESOURCE_MISC_FLAGS = 0;
             structureByteStride: UINT = 0
           ): D3D11_BUFFER_DESC;  inline;
  function D3D11_Texture1D_Desc_
           (
             format: DXGI_FORMAT;
             width: UINT;
             arraySize: UINT = 1;
             mipLevels: UINT = 1;
             bindFlags: D3D11_BIND_FLAGS = D3D11_BIND_SHADER_RESOURCE;
             usage: D3D11_USAGE = D3D11_USAGE_DEFAULT;
             cpuaccessFlags: D3D11_CPU_ACCESS_FLAGS = 0;
             miscFlags: D3D11_RESOURCE_MISC_FLAGS = 0
           ): D3D11_TEXTURE1D_DESC;  inline;
  function D3D11_Texture2D_Desc_
           (
             format: DXGI_FORMAT;
             width: UINT;
             height: UINT;
             arraySize: UINT = 1;
             mipLevels: UINT = 1;
             bindFlags: D3D11_BIND_FLAGS = D3D11_BIND_SHADER_RESOURCE;
             usage: D3D11_USAGE = D3D11_USAGE_DEFAULT;
             cpuaccessFlags: D3D11_CPU_ACCESS_FLAGS = 0;
             sampleCount: UINT = 1;
             sampleQuality: UINT = 0;
             miscFlags: D3D11_RESOURCE_MISC_FLAGS = 0
           ): D3D11_TEXTURE2D_DESC;  inline;
  function D3D11_Texture3D_Desc_
           (
             format: DXGI_FORMAT;
             width: UINT;
             height: UINT;
             depth: UINT;
             mipLevels: UINT = 1;
             bindFlags: D3D11_BIND_FLAGS = D3D11_BIND_SHADER_RESOURCE;
             usage: D3D11_USAGE = D3D11_USAGE_DEFAULT;
             cpuaccessFlags: D3D11_CPU_ACCESS_FLAGS = 0;
             miscFlags: D3D11_RESOURCE_MISC_FLAGS = 0
           ): D3D11_TEXTURE3D_DESC;  inline;
  function D3D11_ShaderResourceViewDesc
           (
             viewDimension: D3D11_SRV_DIMENSION;
             format: DXGI_FORMAT = DXGI_FORMAT_UNKNOWN;
             mostDetailedMip: UINT = 0;     // FirstElement for BUFFER
             mipLevels: UINT = 0;           // NumElements for BUFFER
             firstArraySlice: UINT = 0;     // First2DArrayFace for TEXTURECUBEARRAY
             arraySize: UINT = 0;           // NumCubes for TEXTURECUBEARRAY
             flags: D3D11_BUFFEREX_SRV_FLAGS = 0  // BUFFEREX only
           ): D3D11_SHADER_RESOURCE_VIEW_DESC;  inline;
  function D3D11_RenderTargetViewDesc
           (
             viewDimension: D3D11_RTV_DIMENSION;
             format: DXGI_FORMAT = DXGI_FORMAT_UNKNOWN;
             mipSlice: UINT = 0;         // FirstElement for BUFFER
             firstArraySlice: UINT = 0;  // NumElements for BUFFER, FirstWSlice for TEXTURE3D
             arraySize: UINT = 0         // WSize for TEXTURE3D
           ): D3D11_RENDER_TARGET_VIEW_DESC;  inline;
  function D3D11_Viewport_
           (
             topLeftX, topLeftY: FLOAT;
             width, height: FLOAT;
             minDepth: FLOAT = D3D11_MIN_DEPTH;
             maxDepth: FLOAT = D3D11_MAX_DEPTH
           ): D3D11_VIEWPORT;  inline;
  function D3D11_DepthStencilViewDesc
           (
             viewDimension: D3D11_DSV_DIMENSION;
             format: DXGI_FORMAT = DXGI_FORMAT_UNKNOWN;
             mipSlice: UINT = 0;
             firstArraySlice: UINT = 0;
             arraySize: UINT = 0;
             flags: D3D11_DSV_FLAGS = 0
           ): D3D11_DEPTH_STENCIL_VIEW_DESC;  inline;
  function D3D11_UnorderedAccessViewDesc
           (
             viewDimension: D3D11_UAV_DIMENSION;
             format: DXGI_FORMAT = DXGI_FORMAT_UNKNOWN;
             mipSlice: UINT = 0;           // FirstElement for BUFFER
             firstArraySlice: UINT = 0;    // NumElements for BUFFER, FirstWSlice for TEXTURE3D
             arraySize: UINT = 0;          // WSize for TEXTURE3D
             flags: D3D11_BUFFER_UAV_FLAGS = 0   // BUFFER only
           ): D3D11_UNORDERED_ACCESS_VIEW_DESC;  inline;
  function D3D11_SamplerDesc
           (
             filter: D3D11_FILTER = D3D11_FILTER_MIN_MAG_MIP_LINEAR;
             addressU: D3D11_TEXTURE_ADDRESS_MODE = D3D11_TEXTURE_ADDRESS_CLAMP;
             addressV: D3D11_TEXTURE_ADDRESS_MODE = D3D11_TEXTURE_ADDRESS_CLAMP;
             addressW: D3D11_TEXTURE_ADDRESS_MODE = D3D11_TEXTURE_ADDRESS_CLAMP;
             mipLOD_Bias: FLOAT = 0.0;
             maxAnisotropy: UINT = 1;
             comparisonFunc: D3D11_COMPARISON_FUNC = D3D11_COMPARISON_NEVER;
             borderColor_R: FLOAT = 1.0;
             borderColor_G: FLOAT = 1.0;
             borderColor_B: FLOAT = 1.0;
             borderColor_A: FLOAT = 1.0;
             minLOD: FLOAT = -3.402823466e+38;
             maxLOD: FLOAT = 3.402823466e+38
           ): D3D11_SAMPLER_DESC;  inline;
  function D3D11_QueryDesc
           (
             query: D3D11_QUERY;
             miscFlags: D3D11_QUERY_MISC_FLAGS = 0
           ): D3D11_QUERY_DESC;  inline;
  function D3D11_CounterDesc
           (
             counter: D3D11_COUNTER;
             miscFlags: UINT = 0
           ): D3D11_COUNTER_DESC;  inline;

IMPLEMENTATION

const
  d3d11_dll = 'd3d11.dll';

function D3D11CreateDevice
         (
           pAdapter: IDXGIAdapter;
           DriverType: D3D11_DRIVER_TYPE;
           Software: HMODULE;
           Flags: D3D11_CREATE_DEVICE_FLAGS;
           const pFeatureLevels: LP_D3D_FEATURE_LEVEL;
           nFeatureLevels: UINT;
           SDKVersion: UINT;
           {out} pDevice: LP_ID3D11Device;
           {out} pFeatureLevel: LP_D3D_FEATURE_LEVEL;
           {out} pImmediateContext: LP_ID3D11DeviceContext
         ): HRESULT;  stdcall;
  external d3d11_dll name 'D3D11CreateDevice';

function D3D11CreateDeviceAndSwapChain
         (
           pAdapter: IDXGIAdapter;
           DriverType: D3D11_DRIVER_TYPE;
           Software: HMODULE;
           Flags: D3D11_CREATE_DEVICE_FLAGS;
           pFeatureLevels: LP_D3D_FEATURE_LEVEL;
           nFeatureLevels: UINT;
           SDKVersion: UINT;
           const SwapChainDesc: DXGI_SWAP_CHAIN_DESC;
           {out} pSwapChain: LP_IDXGISwapChain;
           {out} pDevice: LP_ID3D11Device;
           {out} pFeatureLevel: LP_D3D_FEATURE_LEVEL;
           {out} pImmediateContext: LP_ID3D11DeviceContext
         ): HRESULT;  stdcall;
  external d3d11_dll name 'D3D11CreateDeviceAndSwapChain';


function D3D11CalcSubresource(MipSlice, ArraySlice: UINT; MipLevels: UINT): UINT;  inline;
begin
  Result := MipSlice + ( ArraySlice * MipLevels );
end;

function D3D11_ENCODE_BASIC_FILTER(min, mag, mip: UINT; bComparison: Boolean): D3D11_FILTER;
begin
  if ( bComparison ) then
    Result := D3D11_FILTER
              (
                ( D3D11_COMPARISON_FILTERING_BIT ) or
                ( ( ( min ) and D3D11_FILTER_TYPE_MASK ) shl D3D11_MIN_FILTER_SHIFT ) or
                ( ( ( mag ) and D3D11_FILTER_TYPE_MASK ) shl D3D11_MAG_FILTER_SHIFT ) or
                ( ( ( mip ) and D3D11_FILTER_TYPE_MASK ) shl D3D11_MIP_FILTER_SHIFT )
              )
  else
    Result := D3D11_FILTER
              (
                ( 0 ) or
                ( ( ( min ) and D3D11_FILTER_TYPE_MASK ) shl D3D11_MIN_FILTER_SHIFT ) or
                ( ( ( mag ) and D3D11_FILTER_TYPE_MASK ) shl D3D11_MAG_FILTER_SHIFT ) or
                ( ( ( mip ) and D3D11_FILTER_TYPE_MASK ) shl D3D11_MIP_FILTER_SHIFT )
              )
end;

function D3D11_ENCODE_ANISOTROPIC_FILTER(bComparison: BOOL): D3D11_FILTER;  inline;
begin
  Result := D3D11_FILTER
            (
              DWORD(D3D11_ANISOTROPIC_FILTERING_BIT) or
              DWORD(D3D11_ENCODE_BASIC_FILTER(DWORD(D3D11_FILTER_TYPE_LINEAR),
                                          DWORD(D3D11_FILTER_TYPE_LINEAR),
                                          DWORD(D3D11_FILTER_TYPE_LINEAR),
                                          bComparison))
            )
end;

function D3D11_DECODE_MIN_FILTER(d3d11Filter: UINT): D3D11_FILTER_TYPE;  inline;
begin
  Result := D3D11_FILTER_TYPE
            (
              ( d3d11Filter shr D3D11_MIN_FILTER_SHIFT ) and D3D11_FILTER_TYPE_MASK
            )
end;

function D3D11_DECODE_MAG_FILTER(d3d11Filter: UINT): D3D11_FILTER_TYPE;  inline;
begin
  Result := D3D11_FILTER_TYPE
            (
              ( d3d11Filter shr D3D11_MAG_FILTER_SHIFT ) and D3D11_FILTER_TYPE_MASK
            )
end;

function D3D11_DECODE_MIP_FILTER(d3d11Filter: UINT): D3D11_FILTER_TYPE;  inline;
begin
  Result := D3D11_FILTER_TYPE
            (
              ( d3d11Filter shr D3D11_MIP_FILTER_SHIFT ) and D3D11_FILTER_TYPE_MASK
            )
end;

function D3D11_DECODE_IS_COMPARISON_FILTER(d3d11Filter: UINT): Boolean;  inline;
begin
  Result := ( 0 <> ( d3d11Filter and D3D11_COMPARISON_FILTERING_BIT ) )
end;

function D3D11_DECODE_IS_ANISOTROPIC_FILTER(d3d11Filter: UINT): Boolean;  inline;
begin
  Result := ( 0 <> ( d3d11Filter and D3D11_ANISOTROPIC_FILTERING_BIT ) ) and
            ( D3D11_FILTER_TYPE_LINEAR = D3D11_DECODE_MIN_FILTER(d3d11Filter) ) and
            ( D3D11_FILTER_TYPE_LINEAR = D3D11_DECODE_MAG_FILTER(d3d11Filter) ) and
            ( D3D11_FILTER_TYPE_LINEAR = D3D11_DECODE_MIP_FILTER(d3d11Filter) )
end;

function D3D11_SHVER_GET_TYPE(_Version: DWORD): DWORD;  inline;
begin
  Result := ( ( _Version shr 16 ) and $FFFF );
end;

function D3D11_SHVER_GET_MAJOR(_Version: DWORD): DWORD;  inline;
begin
  Result := ( ( _Version shr 4 ) and $0F );
end;

function D3D11_SHVER_GET_MINOR(_Version: DWORD): DWORD;  inline;
begin
  Result := ( ( _Version ) and $0F );
end;

// helper functions
function D3D11_Rect_(left, top, right, bottom: Longint): D3D11_RECT;  inline;
begin
  Result.Left := left;
  Result.Top := top;
  Result.Right := right;
  Result.Bottom := bottom;
end;

function D3D11_Box_(left, top, front, right, bottom, back: UINT): D3D11_BOX;  inline;
begin
  Result.left := left;
  Result.top := top;
  Result.front := front;
  Result.right := right;
  Result.bottom := bottom;
  Result.back := back;
end;

function D3D11_RGBA_FLOAT(r, g, b, a: FLOAT): D3D_RGBA_FLOAT;  inline;
begin
  Result.R := r;
  Result.G := g;
  Result.B := b;
  Result.A := a;
end;

function D3D11_DepthStencilDesc
         (
           depthEnable: BOOL;
           depthWriteMask: D3D11_DEPTH_WRITE_MASK;
           depthFunc: D3D11_COMPARISON_FUNC;
           stencilEnable: BOOL;
           stencilReadMask: UINT8;
           stencilWriteMask: UINT8;
           frontStencilFailOp: D3D11_STENCIL_OP;
           frontStencilDepthFailOp: D3D11_STENCIL_OP;
           frontStencilPassOp: D3D11_STENCIL_OP;
           frontStencilFunc: D3D11_COMPARISON_FUNC;
           backStencilFailOp: D3D11_STENCIL_OP;
           backStencilDepthFailOp: D3D11_STENCIL_OP;
           backStencilPassOp: D3D11_STENCIL_OP;
           backStencilFunc: D3D11_COMPARISON_FUNC
         ): D3D11_DEPTH_STENCIL_DESC;  inline;
begin
  Result.DepthEnable := depthEnable;
  Result.DepthWriteMask := depthWriteMask;
  Result.DepthFunc := depthFunc;
  Result.StencilEnable := stencilEnable;
  Result.StencilReadMask := stencilReadMask;
  Result.StencilWriteMask := stencilWriteMask;
  Result.FrontFace.StencilFailOp := frontStencilFailOp;
  Result.FrontFace.StencilDepthFailOp := frontStencilDepthFailOp;
  Result.FrontFace.StencilPassOp := frontStencilPassOp;
  Result.FrontFace.StencilFunc := frontStencilFunc;
  Result.BackFace.StencilFailOp := backStencilFailOp;
  Result.BackFace.StencilDepthFailOp := backStencilDepthFailOp;
  Result.BackFace.StencilPassOp := backStencilPassOp;
  Result.BackFace.StencilFunc := backStencilFunc;
end;

function D3D11_RasterizerDesc
         (
           fillMode: D3D11_FILL_MODE;
           cullMode: D3D11_CULL_MODE;
           frontCounterClockwise: BOOL;
           depthBias: INT;
           depthBiasClamp: FLOAT;
           slopeScaledDepthBias: FLOAT;
           depthClipEnable: BOOL;
           scissorEnable: BOOL;
           multisampleEnable: BOOL;
           antialiasedLineEnable: BOOL
         ): D3D11_RASTERIZER_DESC;  inline;
begin
  Result.FillMode := fillMode;
  Result.CullMode := cullMode;
  Result.FrontCounterClockwise := frontCounterClockwise;
  Result.DepthBias := depthBias;
  Result.DepthBiasClamp := depthBiasClamp;
  Result.SlopeScaledDepthBias := slopeScaledDepthBias;
  Result.DepthClipEnable := depthClipEnable;
  Result.ScissorEnable := scissorEnable;
  Result.MultisampleEnable := multisampleEnable;
  Result.AntialiasedLineEnable := antialiasedLineEnable;
end;

function D3D11_BufferDesc
         (
           byteWidth: UINT;
           bindFlags: UINT;
           usage: D3D11_USAGE;
           cpuaccessFlags: D3D11_CPU_ACCESS_FLAGS;
           miscFlags: D3D11_RESOURCE_MISC_FLAGS;
           structureByteStride: UINT
         ): D3D11_BUFFER_DESC;  inline;
begin
  Result.ByteWidth := byteWidth;
  Result.Usage := usage;
  Result.BindFlags := bindFlags;
  Result.CPUAccessFlags := cpuaccessFlags;
  Result.MiscFlags := miscFlags;
  Result.StructureByteStride := structureByteStride;
end;

function D3D11_Texture1D_Desc_
         (
           format: DXGI_FORMAT;
           width: UINT;
           arraySize: UINT;
           mipLevels: UINT;
           bindFlags: D3D11_BIND_FLAGS;
           usage: D3D11_USAGE;
           cpuaccessFlags: D3D11_CPU_ACCESS_FLAGS;
           miscFlags: D3D11_RESOURCE_MISC_FLAGS
         ): D3D11_TEXTURE1D_DESC;  inline;
begin
  Result.Width := width;
  Result.MipLevels := mipLevels;
  Result.ArraySize := arraySize;
  Result.Format := format;
  Result.Usage := usage;
  Result.BindFlags := bindFlags;
  Result.CPUAccessFlags := cpuaccessFlags;
  Result.MiscFlags := miscFlags;
end;

function D3D11_Texture2D_Desc_
         (
           format: DXGI_FORMAT;
           width: UINT;
           height: UINT;
           arraySize: UINT;
           mipLevels: UINT;
           bindFlags: D3D11_BIND_FLAGS;
           usage: D3D11_USAGE;
           cpuaccessFlags: D3D11_CPU_ACCESS_FLAGS;
           sampleCount: UINT;
           sampleQuality: UINT;
           miscFlags: D3D11_RESOURCE_MISC_FLAGS
         ): D3D11_TEXTURE2D_DESC;  inline;
begin
  Result.Width := width;
  Result.Height := height;
  Result.MipLevels := mipLevels;
  Result.ArraySize := arraySize;
  Result.Format := format;
  Result.SampleDesc.Count := sampleCount;
  Result.SampleDesc.Quality := sampleQuality;
  Result.Usage := usage;
  Result.BindFlags := bindFlags;
  Result.CPUAccessFlags := cpuaccessFlags;
  Result.MiscFlags := miscFlags;
end;

function D3D11_Texture3D_Desc_
         (
           format: DXGI_FORMAT;
           width: UINT;
           height: UINT;
           depth: UINT;
           mipLevels: UINT;
           bindFlags: D3D11_BIND_FLAGS;
           usage: D3D11_USAGE;
           cpuaccessFlags: D3D11_CPU_ACCESS_FLAGS;
           miscFlags: D3D11_RESOURCE_MISC_FLAGS
         ): D3D11_TEXTURE3D_DESC;  inline;
begin
  Result.Width := width;
  Result.Height := height;
  Result.Depth := depth;
  Result.MipLevels := mipLevels;
  Result.Format := format;
  Result.Usage := usage;
  Result.BindFlags := bindFlags;
  Result.CPUAccessFlags := cpuaccessFlags;
  Result.MiscFlags := miscFlags;
end;

function D3D11_ShaderResourceViewDesc
         (
           viewDimension: D3D11_SRV_DIMENSION;
           format: DXGI_FORMAT;
           mostDetailedMip: UINT;  // FirstElement for BUFFER
           mipLevels: UINT;        // NumElements for BUFFER
           firstArraySlice: UINT;  // First2DArrayFace for TEXTURECUBEARRAY
           arraySize: UINT;        // NumCubes for TEXTURECUBEARRAY
           flags: D3D11_BUFFEREX_SRV_FLAGS    // BUFFEREX only
         ): D3D11_SHADER_RESOURCE_VIEW_DESC;  inline;
begin
  Result.Format := format;
  Result.ViewDimension := viewDimension;

  case viewDimension of
    D3D11_SRV_DIMENSION_BUFFER:
      begin
        Result.Buffer.FirstElement := mostDetailedMip;
        Result.Buffer.NumElements := mipLevels;
      end;
    D3D11_SRV_DIMENSION_TEXTURE1D:
      begin
        Result.Texture1D.MostDetailedMip := mostDetailedMip;
        Result.Texture1D.MipLevels := mipLevels;
      end;
    D3D11_SRV_DIMENSION_TEXTURE1DARRAY:
      begin
        Result.Texture1DArray.MostDetailedMip := mostDetailedMip;
        Result.Texture1DArray.MipLevels := mipLevels;
        Result.Texture1DArray.FirstArraySlice := firstArraySlice;
        Result.Texture1DArray.ArraySize := arraySize;
      end;
    D3D11_SRV_DIMENSION_TEXTURE2D:
      begin
        Result.Texture2D.MostDetailedMip := mostDetailedMip;
        Result.Texture2D.MipLevels := mipLevels;
      end;
    D3D11_SRV_DIMENSION_TEXTURE2DARRAY:
      begin
        Result.Texture2DArray.MostDetailedMip := mostDetailedMip;
        Result.Texture2DArray.MipLevels := mipLevels;
        Result.Texture2DArray.FirstArraySlice := firstArraySlice;
        Result.Texture2DArray.ArraySize := arraySize;
      end;
    D3D11_SRV_DIMENSION_TEXTURE2DMSARRAY:
      begin
        Result.Texture2DMSArray.FirstArraySlice := firstArraySlice;
        Result.Texture2DMSArray.ArraySize := arraySize;
      end;
    D3D11_SRV_DIMENSION_TEXTURE3D:
      begin
        Result.Texture3D.MostDetailedMip := mostDetailedMip;
        Result.Texture3D.MipLevels := mipLevels;
      end;
    D3D11_SRV_DIMENSION_TEXTURECUBE:
      begin
        Result.TextureCube.MostDetailedMip := mostDetailedMip;
        Result.TextureCube.MipLevels := mipLevels;
      end;
    D3D11_SRV_DIMENSION_TEXTURECUBEARRAY:
      begin
        Result.TextureCubeArray.MostDetailedMip := mostDetailedMip;
        Result.TextureCubeArray.MipLevels := mipLevels;
        Result.TextureCubeArray.First2DArrayFace := firstArraySlice;
        Result.TextureCubeArray.NumCubes := arraySize;
      end;
    D3D11_SRV_DIMENSION_BUFFEREX:
      begin
        Result.BufferEx.FirstElement := mostDetailedMip;
        Result.BufferEx.NumElements := mipLevels;
        Result.BufferEx.Flags := flags;
      end;
  end;
end;

function D3D11_RenderTargetViewDesc
         (
           viewDimension: D3D11_RTV_DIMENSION;
           format: DXGI_FORMAT;
           mipSlice: UINT;         // FirstElement for BUFFER
           firstArraySlice: UINT;  // NumElements for BUFFER, FirstWSlice for TEXTURE3D
           arraySize: UINT         // WSize for TEXTURE3D
         ): D3D11_RENDER_TARGET_VIEW_DESC;  inline;
begin
  Result.Format := format;
  Result.ViewDimension := viewDimension;

  case viewDimension of
    D3D11_RTV_DIMENSION_BUFFER:
      begin
        Result.Buffer.FirstElement := mipSlice;
        Result.Buffer.NumElements := firstArraySlice;
      end;
    D3D11_RTV_DIMENSION_TEXTURE1D:
        Result.Texture1D.MipSlice := mipSlice;
    D3D11_RTV_DIMENSION_TEXTURE1DARRAY:
      begin
        Result.Texture1DArray.MipSlice := mipSlice;
        Result.Texture1DArray.FirstArraySlice := firstArraySlice;
        Result.Texture1DArray.ArraySize := arraySize;
      end;
    D3D11_RTV_DIMENSION_TEXTURE2D:
        Result.Texture2D.MipSlice := mipSlice;
    D3D11_RTV_DIMENSION_TEXTURE2DARRAY:
      begin
        Result.Texture2DArray.MipSlice := mipSlice;
        Result.Texture2DArray.FirstArraySlice := firstArraySlice;
        Result.Texture2DArray.ArraySize := arraySize;
      end;
    D3D11_RTV_DIMENSION_TEXTURE2DMSARRAY:
      begin
        Result.Texture2DMSArray.FirstArraySlice := firstArraySlice;
        Result.Texture2DMSArray.ArraySize := arraySize;
      end;
    D3D11_RTV_DIMENSION_TEXTURE3D:
      begin
        Result.Texture3D.MipSlice := mipSlice;
        Result.Texture3D.FirstWSlice := firstArraySlice;
        Result.Texture3D.WSize := arraySize;
      end;
  end;
end;

function D3D11_Viewport_
         (
           topLeftX, topLeftY: FLOAT;
           width, height: FLOAT;
           minDepth: FLOAT;
           maxDepth: FLOAT
         ): D3D11_VIEWPORT;  inline;
begin
  Result.TopLeftX := topLeftX;
  Result.TopLeftY := topLeftY;
  Result.Width := width;
  Result.Height := height;
  Result.MinDepth := minDepth;
  Result.MaxDepth := maxDepth;
end;

function D3D11_DepthStencilViewDesc
         (
           viewDimension: D3D11_DSV_DIMENSION;
           format: DXGI_FORMAT;
           mipSlice: UINT;
           firstArraySlice: UINT;
           arraySize: UINT;
           flags: D3D11_DSV_FLAGS
         ): D3D11_DEPTH_STENCIL_VIEW_DESC;  inline;
begin
  Result.Format := format;
  Result.ViewDimension := viewDimension;
  Result.Flags := flags;

  case viewDimension of
    D3D11_DSV_DIMENSION_TEXTURE1D:
        Result.Texture1D.MipSlice := mipSlice;
    D3D11_DSV_DIMENSION_TEXTURE1DARRAY:
      begin
        Result.Texture1DArray.MipSlice := mipSlice;
        Result.Texture1DArray.FirstArraySlice := firstArraySlice;
        Result.Texture1DArray.ArraySize := arraySize;
      end;
    D3D11_DSV_DIMENSION_TEXTURE2D:
        Result.Texture2D.MipSlice := mipSlice;
    D3D11_DSV_DIMENSION_TEXTURE2DARRAY:
      begin
        Result.Texture2DArray.MipSlice := mipSlice;
        Result.Texture2DArray.FirstArraySlice := firstArraySlice;
        Result.Texture2DArray.ArraySize := arraySize;
      end;
    D3D11_DSV_DIMENSION_TEXTURE2DMSARRAY:
      begin
        Result.Texture2DMSArray.FirstArraySlice := firstArraySlice;
        Result.Texture2DMSArray.ArraySize := arraySize;
      end;
  end;
end;

function D3D11_UnorderedAccessViewDesc
         (
           viewDimension: D3D11_UAV_DIMENSION;
           format: DXGI_FORMAT;
           mipSlice: UINT;                 // FirstElement for BUFFER
           firstArraySlice: UINT;          // NumElements for BUFFER, FirstWSlice for TEXTURE3D
           arraySize: UINT;                // WSize for TEXTURE3D
           flags: D3D11_BUFFER_UAV_FLAGS   // BUFFER only
         ): D3D11_UNORDERED_ACCESS_VIEW_DESC;  inline;
begin
  Result.Format := format;
  Result.ViewDimension := viewDimension;

  case viewDimension of
    D3D11_UAV_DIMENSION_BUFFER:
      begin
        Result.Buffer.FirstElement := mipSlice;
        Result.Buffer.NumElements := firstArraySlice;
        Result.Buffer.Flags := flags;
      end;
    D3D11_UAV_DIMENSION_TEXTURE1D:
        Result.Texture1D.MipSlice := mipSlice;
    D3D11_UAV_DIMENSION_TEXTURE1DARRAY:
      begin
        Result.Texture1DArray.MipSlice := mipSlice;
        Result.Texture1DArray.FirstArraySlice := firstArraySlice;
        Result.Texture1DArray.ArraySize := arraySize;
      end;
    D3D11_UAV_DIMENSION_TEXTURE2D:
        Result.Texture2D.MipSlice := mipSlice;
    D3D11_UAV_DIMENSION_TEXTURE2DARRAY:
      begin
        Result.Texture2DArray.MipSlice := mipSlice;
        Result.Texture2DArray.FirstArraySlice := firstArraySlice;
        Result.Texture2DArray.ArraySize := arraySize;
      end;
    D3D11_UAV_DIMENSION_TEXTURE3D:
      begin
        Result.Texture3D.MipSlice := mipSlice;
        Result.Texture3D.FirstWSlice := firstArraySlice;
        Result.Texture3D.WSize := arraySize;
      end;
  end;
end;

function D3D11_SamplerDesc
         (
           filter: D3D11_FILTER;
           addressU: D3D11_TEXTURE_ADDRESS_MODE;
           addressV: D3D11_TEXTURE_ADDRESS_MODE;
           addressW: D3D11_TEXTURE_ADDRESS_MODE;
           mipLOD_Bias: FLOAT;
           maxAnisotropy: UINT;
           comparisonFunc: D3D11_COMPARISON_FUNC;
           borderColor_R: FLOAT;
           borderColor_G: FLOAT;
           borderColor_B: FLOAT;
           borderColor_A: FLOAT;
           minLOD: FLOAT;
           maxLOD: FLOAT
         ): D3D11_SAMPLER_DESC;  inline;
begin
  Result.Filter := filter;
  Result.AddressU := addressU;
  Result.AddressV := addressV;
  Result.AddressW := addressW;
  Result.MipLODBias := mipLOD_Bias;
  Result.MaxAnisotropy := maxAnisotropy;
  Result.ComparisonFunc := comparisonFunc;
  Result.BorderColor[0] := borderColor_R;
  Result.BorderColor[1] := borderColor_G;
  Result.BorderColor[2] := borderColor_B;
  Result.BorderColor[3] := borderColor_A;
  Result.MinLOD := minLOD;
  Result.MaxLOD := maxLOD;
end;

function D3D11_QueryDesc
         (
           query: D3D11_QUERY;
           miscFlags: D3D11_QUERY_MISC_FLAGS
         ): D3D11_QUERY_DESC;  inline;
begin
  Result.Query := query;
  Result.MiscFlags := miscFlags;
end;

function D3D11_CounterDesc
         (
           counter: D3D11_COUNTER;
           miscFlags: UINT
         ): D3D11_COUNTER_DESC;  inline;
begin
  Result.Counter := counter;
  Result.MiscFlags := miscFlags;
end;

END.
